Trabalho de IA - 2012/01

-------------------------------------------------------------------
Compilação
-------------------------------------------------------------------

Para conseguir compilar as bibliotecas SDL/SDL.h e SDL/SDL_opengl.h:
$ sudo apt-get install libsdl1.2-dev
$ sudo apt-get install libsdl-image1.2-dev

Para conseguir compilar a GL/glui.h e GL/glut.h
$ sudo apt-get install libglui-dev
$ sudo apt-get install freeglut3-dev

Para conseguir compilar a opencv/highgui.h
$ sudo apt-get install libhighgui-dev

-------------------------------------------------------------------
Debugger
-------------------------------------------------------------------

Debbuger para linux:

Para instalar o ambiente de debugger:
 $ sudo apt-get install electric-fence
 $ sudo apt-get install valgrind
 $ sudo apt-get install gdb

Para compilar o programa: 
 $ gcc -g -o teste teste.c -Wall -lefence -O0

 -g: para o gdb
 -lefence: para rodar o electric fence
 -O0: para o compilador não realizar otimizações, não bagunça
 o número das linhas do programa

Para testar com o debugger:
 $ valgrind --leak-check=full ./tetralath tabuleiro.jpg


-------------------------------------------------------------------
Outros Trabalhos
-------------------------------------------------------------------

Trabalhos de IA:
- César Daudt e Gabriel Barufi: https://www.dropbox.com/s/a8eywdu9qv03zti/jogos_2.zip

-------------------------------------------------------------------
Anotações
-------------------------------------------------------------------

Minimax - Função de Avaliação.

Recebe uma lista de posições com peças pretas
1: Para cada posição testa se esta posição possui algum vizinho também branco (1-?)
	2: vizinho é branco (2-?). Inicia teste em linha
		5: vizinho é branco (3-?)
			8: vizinho é branco (4) => VITÓRIA
			9: vizinho é vazio ou preto => DERROTA
		6: vizinho é vazio (2-vazio-?)
			10: vizinho é branco (2-vazio-1) => POSSIBILIDADE FUTURA 1
			11: vizinho é vazio (2-vazio-vazio) => POSSIBILIDADE FUTURA 2
			12: vizinho é preto (2-vazio-!) => POSSIBILIDADE FUTURA 3
		7: vizinho é preto (2-!) => POSSIBILIDADE FUTURA 3
	3: vizinho é vazio (1-vazio-?). Inicia teste em linha
		13: vizinho é branco (1-vazio-1-?)
			16: vizinho é branco (1-vazio-2) => POSSIBILIDADE FUTURA 1
			17: vizinho é vazio (1-vazio-1-vazio) => POSSIBILIDADE FUTURA 2
			18: vizinho é preto (1-vazio-1-!) => POSSIBILIDADE FUTURA 3
		14: vizinho é vazio (1-vazio-vazio-?)
			19: vizinho é branco (1-vazio-vazio-1) => POSSIBILIDADE FUTURA 2
			20: vizinho é vazio (1-vazio-vazio-vazio) => POSSIBILIDADE FUTURA 2
			21: vizinho é preto (1-vazio-vazio-!) => POSSIBILIDADE FUTURA 3
		15: vizinho é preto (1-vazio-!) => POSSIBILIDADE FUTURA 3
	4: vizinho é preto (1-!) => POSSIBILIDADE FUTURA 3

Ordem valorada da função de avaliação:
VITÓRIA > PF1 > PF2 > PF3 > DERROTA

Jogadas:
(4)	=> VITÓRIA				
(2-vazio-1) => MAX_PESO 1
(1-vazio-2) => MAX_PESO 1
(2-vazio-vazio) => MAX_PESO 2
(1-vazio-1-vazio) => MAX_PESO 2
(1-vazio-vazio-1) => MAX_PESO 2
(2-vazio-!) => MAX_PESO 3
(2-vazio) => MAX_PESO 3
(1-vazio-1-!) => MAX_PESO 3
(1-vazio-1) => MAX_PESO 3
(1-vazio-vazio-vazio) => MAX_PESO 4
(1-vazio-vazio-!) => MAX_PESO 4
(1-vazio-vazio) => MAX_PESO 4
(1-vazio-!) => MAX_PESO 4
(2-!) => DERROTA
(2)	=> DERROTA
(1-!) => DERROTA
(1) => DERROTA
(3) => DERROTA

Legenda:
?: não se sabe o que tem
!: peça preta
1: uma peça branca
2: duas peças brancas (em linha)
vazio: posição sem peça



