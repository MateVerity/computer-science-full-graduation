;; The first three lines of this file were inserted by DrScheme. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname |aula 14 - Dados Auto-Referenci√°veis - √Årvore Geneal√≥gica e √Årvore Bin√°ria de Pesquisa|) (read-case-sensitive #t) (teachpacks ((lib "convert.ss" "teachpack" "htdp"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "convert.ss" "teachpack" "htdp")))))
;;Aula 14 - Defini√ß√µes de Dados Auto-Referenci√°veis

;;√Årvore Geneal√≥gica

;;Defini√ß√£o de Dados:
(define-struct filho (pai m√£e nome data olhos))
;;Um filho √© uma estrutura: 
;;(make-filho p m n d o), onde
;;- p e m: s√£o estruturas do tipo filho
;;- n e o: s√£o s√≠mbolos
;;- d: √© um n√∫mero

;;Um n√≥ da √°rvore geneal√≥gica √©:
;;‚Äì empty, ou
;;‚Äì (make-filho p m n d o), onde p e m s√£o n√≥s, n e o s√£o s√≠mbolos
;;e d √© um n√∫mero

;;Declara√ß√£o das estruturas "filho":
;; Gera√ß√£o antiga:
(define Carl (make-filho empty empty 'Carl 1926 'verdes))
(define Bettina (make-filho empty empty 'Bettina 1926 'verdes))

;; Gera√ß√£o intermedi√°ria:
(define Adam (make-filho Carl Bettina 'Adam 1950 'amarelos))
(define Eva (make-filho Carl Bettina 'Eva 1965 'azuis))
(define Fred (make-filho empty empty 'Fred 1966 'pink))

;; Gera√ß√£o nova:
(define Gustav (make-filho Fred Eva 'Gustav 1988 'castanhos))

;;ancestral-olhos-azuis? n√≥ -> boolean
;;Determina se em uma dada √°rvore de ascend√™ncia
;;existe alguma uma estrutura filho com olhos azuis

(define (ancestral-olhos-azuis? n√≥)
  (cond
    [(empty? n√≥) false]
    [else
     (cond
       [(symbol=? (filho-olhos n√≥) 'azuis) true]
       [(ancestral-olhos-azuis? (filho-pai n√≥)) true]
       [(ancestral-olhos-azuis? (filho-m√£e n√≥)) true] 
       [else false])
     ]))

;;Exemplos:
;(ancestral-olhos-azuis? Carl); produz false
;(ancestral-olhos-azuis? Gustav); produz true


;;----------------------------------------------------------------------------
;;----------------------------------------------------------------------------
;;----------------------------------------------------------------------------

;;√Årvore Bin√°ria de Pesquisa

;;Defini√ß√£o de Dados:
(define-struct n√≥ (id nome esq dir))
;;Um n√≥ de uma √°rvore bin√°ria √© da forma:
;;(make-n√≥ id n esq dir), onde:
;;- id: √© um n√∫mero
;;- n: √© um s√≠mbolo
;;- esq e dir: s√£o estruturas do tipo n√≥

;;Uma √°rvore bin√°ria √©:
;;‚Äì empty (tamb√©m poderia ser false) ou
;;‚Äì (make-n√≥ v n e d) onde
;;v √© um n√∫mero, n √© um s√≠mbolo, e e d s√£o √°rvores bin√°rias.

;;Uma √°rvore bin√°ria de pesquisa √©:
;;- empty √© sempre uma AB, ou
;;- (make-n√≥ val nome esq dir) √© uma ABP se:
;;     1. esq e dir s√£o ABP
;;     2. Todos val dos n√≥s esq de um n√≥ s√£o menores que o val deste n√≥

;;insere-n√≥ : ABP n√∫mero s√≠mbolo -> ABP
;;Cria uma nova √°rvore ABP igual √† ABP passada na entrada,
;;mas com a adi√ß√£o do n√≥ com os valores ‚Äôid‚Äô e ‚Äôn‚Äô passados
;;na entrada.

(define (insere-n√≥ abp id n)
  (cond
    [(empty? abp) (make-n√≥ id n empty empty)]
    [else
     (cond
       [(< id (n√≥-id abp))
        (make-n√≥ (n√≥-id abp)
                 (n√≥-nome abp)
                 (insere-n√≥ (n√≥-esq abp) id n)
                 (n√≥-dir abp))]
       [(> id (n√≥-id abp))
        (make-n√≥ (n√≥-id abp) 
                 (n√≥-nome abp)
                 (n√≥-esq abp)
                 (insere-n√≥ (n√≥-dir abp) id n))]
       [else (error 'insere-n√≥ "Id j√° inserido")])]))
  
;;Exemplos: 
;(insere-n√≥ empty 6 'b); (make-n√≥ 6 'b empty empty) 
;(insere-n√≥ (make-n√≥ 4 'a empty empty) 5 'a); (make-n√≥ 4 'a empty (make-n√≥ 5 'a empty empty)) 
;(insere-n√≥ (make-n√≥ 4 'a empty empty) 3 'g);
;(insere-n√≥ (make-n√≥ 4 'a (make-n√≥ 2 'a empty empty) empty) 3 'g)


;;constr√≥i-ABP : lista-de-n√∫meros -> ABP
;;Constr√≥i uma ABP a partir de n√∫meros informados
;;em uma lista, os quais possuem um s√≠mbolo associado

(define (constr√≥i-ABP ldn)
  (cond
    [(empty? ldn) empty]
    [else
     (insere-n√≥
      (constr√≥i-ABP (rest ldn))
      (first (first ldn))
      (second (first ldn))
      )]))

;;Exemplos:
;(constr√≥i-ABP (list)) ;empty
;(constr√≥i-ABP (list (list 1 'a) (list 18 'b) (list 2 'g))) ;(make-n√≥ 2 ‚Äôg (make-n√≥ 1 ‚Äôa empty empty) (make-n√≥ 18 ‚Äôb empty empty))
;(constr√≥i-ABP (list (list 4 'a) (list 6 'b) (list 1 'c) (list 8 'h) (list 9 'x) (list 5 'l)))
;(make-n√≥ 5 'l (make-n√≥ 1 'c empty (make-n√≥ 4 'a empty empty)) (make-n√≥ 9 'x (make-n√≥ 8 'h (make-n√≥ 6 'b empty empty) empty) empty))


;;----------------------------------------------------------------------------
;;----------------------------------------------------------------------------
;;----------------------------------------------------------------------------

;;P√°gina Web

;;Uma p√°gina web √©:
;;1. empty
;;2. (cons s wp), onde s √© um s√≠mbolo e wp √© uma p√°gina web
;;3. (cons ewp wp), onde ewp e wp s√£o p√°ginas web

;; A defini√ß√£o de dados acima tem:
;;‚Äì Tr√™s cl√°usulas (em vez de duas)
;;‚Äì Tr√™s auto-refer√™ncias (em vez de uma)

;; conta-s√≠mbolos: wp -> n√∫mero
;; Conta o n√∫mero de s√≠mbolos de uma p√°gina web

(define (conta-s√≠mbolos a-wp)
  (cond
    [(empty? a-wp) 0]
    [(symbol? (first a-wp))
     (+ 1 (conta-s√≠mbolos (rest a-wp)))]
    [else
     (+ (conta-s√≠mbolos (first a-wp))
        (conta-s√≠mbolos (rest a-wp)))
     ]))

;;Exemplos:
;(conta-s√≠mbolos (list (list 'a 'b 'c) (list (list 'd 'e) 'x))) ;produz 6