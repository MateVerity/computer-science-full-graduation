Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 1
minado.ASM



      1				     ;===============================================================================================
      2				     ===========================
      3				     ;==											    +
      4				     ==
      5				     ;==				       Universidade Federal do Rio Grande Do Sul	    +
      6				     ==
      7				     ;==				      Arquitetura e Organização	de Computadores	I	    +
      8				     ==
      9				     ;==					  Professor Carlos Arthur Lang Lisboa		    +
     10				     ==
     11				     ;==						Trabalho Prático - Intel		    +
     12				     ==
     13				     ;==						   Campo Minado	III			    +
     14				     ==
     15				     ;==				     Nome: João	Luiz Grave Gross | Cartão: 180171	    +
     16				     ==
     17				     ;==											    +
     18				     ==
     19				     ;===============================================================================================
     20				     ===========================
     21
     22
     23				     ;===============================================================================================
     24				     ===========================
     25				     ;==					       Inicialização do	Progama			    +
     26				     ==
     27				     ;===============================================================================================
     28				     ===========================
     29
     30						     assume ss:pilha, ds:dados,	cs:program
     31
     32				     ; Segmento	de Dados - Declaração de Variáveis
     33	0000			     dados segment
     34
     35					     ; Teclas /	Constantes
     36	      =000D			     CR		     EQU     0DH ; constante - codigo ASCII do caractere "carriage return"  +
     37				     (move cursor para a primeira coluna)
     38	      =000A			     LF		     EQU     0AH ; constante - codigo ASCII do caractere "line feed" (nova  +
     39				     linha)
     40	      =001B			     EXIT	     EQU     1BH ; caractere ASCII "Escape" (usado para	terminar no DOS	Box)+
     41				     (ESC)
     42	      =0009			     TAB	     EQU     09H ; caractere ASCII "Tabulacao"
     43	      =0008			     BACKSPACE	     EQU     08H ; caractere ASCII "Backspace"
     44	      =0000			     DIRECIONAL	 EQU	     00H ; caractere ASCII "Direcional"
     45	      =0048			     UP			     EQU	     48H ; Scan	Code para "UP"
     46	      =0050			     DOWN	     EQU	     50H ; Scan	Code para "DOWM"
     47	      =004B			     LEFT	     EQU	     4BH ; Scan	Code para "LEFT"
     48	      =004D			     RIGHT	     EQU	     4DH ; Scan	Code para "RIGHT"
     49	      =000D			     SEND	     EQU	     0DH ; caractere ASCII "ENTER"
     50	      =0074			     T			     EQU     74H ; caractere ASCII "t"
     51
     52
     53					     ; Arrays
     54	0000  64*(00)			     conteudo_matriz	     db	100 dup	(0)  ; em cada posição do array	terá inicialmente os+
     55				     valores 0 a 8 e -1
     56														     ; 0 a 8: número+
     57				     de	bombas em volta	da posição, -1:	posição	tem bomba
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 2
minado.ASM



     58	0064  64*(00)			     escolha_marcadores	     db	100 dup	(0)  ; cria um array de	100 posições e inicializa   +
     59				     todas com o valor zero
     60														     ; esse array   +
     61				     irá guardar a escolha dos marcadores das posições da matriz
     62														     ; Ex.: guargar +
     63				     o valor de	'A' na posicao (1,2) da	matriz caso
     64														     ; o usuário    +
     65				     queira abrir essa posição,	ou 'M' se quiser marcar
     66
     67					     ; Informações
     68					     ; 1) em cada célula da matriz o cursor fica posicionado nas seguinte coordenadas de tela
     69						     ; - Linha:
     70							     ; * coordenada de linha da	tela:	     4	     6	     8	     10	    +
     71				     12	     14	     16	     18	     20	     22
     72							     ; * coordenada de linha da	matriz:	     1	     2	     3	     4	    +
     73				     5	     6	     7	     8	     9	     10
     74							     ; * equações:
     75								     ; # obter coordenada de linha da matriz, pela coordenada de    +
     76				     linha da tela: linha_matriz = (linha_tela-2)/2
     77								     ; # obter coordenada de linha da tela, pela coordenada de linha+
     78				     da	matriz:	linha_tela = 2 + linha_tela*2
     79						     ; - Coluna:
     80							     ; * coordenada de coluna tela:	     5	     9	     13	     17	    +
     81				     21	     25	     29	     33	     37	     41
     82							     ; * coordenada de coluna matriz:	     1	     2	     3	     4	    +
     83				     5	     6	     7	     8	     9	     10
     84							     ; * equações:
     85								     ; # obter coordenada de coluna da matriz, pela coordenada de   +
     86				     coluna da tela: coluna_matriz = (coluna_tela-1)/4
     87								     ; # obter coordenada de coluna da tela, pela coordenada de	    +
     88				     coluna da matriz: coluna_tela = 1 + coluna_tela*4
     89
     90					     ; Algoritmo
     91					     ; 1) Quando o cursor estiver sobre	uma posição teremos os valores de linha_tela e	    +
     92				     coluna_tela daquela posição
     93					     ; 2) Obtemos os valores de	linha_matriz e coluna_matriz através de	linha_tela e	    +
     94				     coluna_tela
     95					     ; 3) Com linha_matriz e coluna_matriz posso acessar as posições dos arrays		    +
     96				     'counteudo_matriz'	e 'escolha_matriz'
     97					     ; com a seguinte equação: array[x]	= 10*(linha_matriz-1) +	(linha_coluna-1)
     98
     99
    100					     ; Strings
    101	00C8				     tela:
    102					     ;			       1	     2		       3	     4		    +
    103				     5		   6		     7
    104					     ;	 01234567890123456789012345678901234567890123456789012345678901234567890123456789
    105	00C8  20 20 20 20 20 20	43+	     db	'      Campo Minado III	- por Joao Luiz	Grave Gross - 180171 - Julho de	2010	 ' ;+
    106	      61 6D 70 6F 20 4D	69+  00
    107	      6E 61 64 6F 20 49	49+
    108	      49 20 2D 20 70 6F	72+
    109	      20 4A 6F 61 6F 20	4C+
    110	      75 69 7A 20 47 72	61+
    111	      76 65 20 47 72 6F	73+
    112	      73 20 2D 20 31 38	30+
    113	      31 37 31 20 2D 20	4A+
    114	      75 6C 68 6F 20 64	65+
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 3
minado.ASM



    115	      20 32 30 31 30 20	20+
    116	      20 20 20
    117	0118  20 20 20 20 20 20	20+	     db	'										 ' ;+
    118	      20 20 20 20 20 20	20+  01
    119	      20 20 20 20 20 20	20+
    120	      20 20 20 20 20 20	20+
    121	      20 20 20 20 20 20	20+
    122	      20 20 20 20 20 20	20+
    123	      20 20 20 20 20 20	20+
    124	      20 20 20 20 20 20	20+
    125	      20 20 20 20 20 20	20+
    126	      20 20 20 20 20 20	20+
    127	      20 20 20 20 20 20	20+
    128	      20 20 20
    129	0168  20 20 20 20 20 31	20+	     db	'     1	  2   3	  4   5	  6   7	  8   9	  10					 ' ;+
    130	      20 20 32 20 20 20	33+  02
    131	      20 20 20 34 20 20	20+
    132	      35 20 20 20 36 20	20+
    133	      20 37 20 20 20 38	20+
    134	      20 20 39 20 20 20	31+
    135	      30 20 20 20 20 20	20+
    136	      20 20 20 20 20 20	20+
    137	      20 20 20 20 20 20	20+
    138	      20 20 20 20 20 20	20+
    139	      20 20 20 20 20 20	20+
    140	      20 20 20
    141	01B8  20 20 20 2A 2D 2D	2D+	     db	'   *---*---*---*---*---*---*---*---*---*---*					 ' ;+
    142	      2A 2D 2D 2D 2A 2D	2D+  03
    143	      2D 2A 2D 2D 2D 2A	2D+
    144	      2D 2D 2A 2D 2D 2D	2A+
    145	      2D 2D 2D 2A 2D 2D	2D+
    146	      2A 2D 2D 2D 2A 2D	2D+
    147	      2D 2A 20 20 20 20	20+
    148	      20 20 20 20 20 20	20+
    149	      20 20 20 20 20 20	20+
    150	      20 20 20 20 20 20	20+
    151	      20 20 20 20 20 20	20+
    152	      20 20 20
    153	0208  20 31 20 7C 5B 20	5D+	 db ' 1	|[ ]|	|   |	|   |	|   |	|   |	|   Total de minas no campo:  15     ' ; 04
    154	      7C 20 20 20 7C 20	20+
    155	      20 7C 20 20 20 7C	20+
    156	      20 20 7C 20 20 20	7C+
    157	      20 20 20 7C 20 20	20+
    158	      7C 20 20 20 7C 20	20+
    159	      20 7C 20 20 20 54	6F+
    160	      74 61 6C 20 64 65	20+
    161	      6D 69 6E 61 73 20	6E+
    162	      6F 20 63 61 6D 70	6F+
    163	      3A 20 20 31 35 20	20+
    164	      20 20 20
    165	0258  20 20 20 2A 2D 2D	2D+	     db	'   *---*---*---*---*---*---*---*---*---*---*	Total de minas marcadas:   0	 ' ;+
    166	      2A 2D 2D 2D 2A 2D	2D+  05
    167	      2D 2A 2D 2D 2D 2A	2D+
    168	      2D 2D 2A 2D 2D 2D	2A+
    169	      2D 2D 2D 2A 2D 2D	2D+
    170	      2A 2D 2D 2D 2A 2D	2D+
    171	      2D 2A 20 20 20 54	6F+
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 4
minado.ASM



    172	      74 61 6C 20 64 65	20+
    173	      6D 69 6E 61 73 20	6D+
    174	      61 72 63 61 64 61	73+
    175	      3A 20 20 20 30 20	20+
    176	      20 20 20
    177	02A8  20 32 20 7C 20 20	20+	     db	' 2 |	|   |	|   |	|   |	|   |	|   |	Total de minas a marcar:  15	 ' ;+
    178	      7C 20 20 20 7C 20	20+  06
    179	      20 7C 20 20 20 7C	20+
    180	      20 20 7C 20 20 20	7C+
    181	      20 20 20 7C 20 20	20+
    182	      7C 20 20 20 7C 20	20+
    183	      20 7C 20 20 20 54	6F+
    184	      74 61 6C 20 64 65	20+
    185	      6D 69 6E 61 73 20	61+
    186	      20 6D 61 72 63 61	72+
    187	      3A 20 20 31 35 20	20+
    188	      20 20 20
    189	02F8  20 20 20 2A 2D 2D	2D+	     db	'   *---*---*---*---*---*---*---*---*---*---*					 ' ;+
    190	      2A 2D 2D 2D 2A 2D	2D+  07
    191	      2D 2A 2D 2D 2D 2A	2D+
    192	      2D 2D 2A 2D 2D 2D	2A+
    193	      2D 2D 2D 2A 2D 2D	2D+
    194	      2A 2D 2D 2D 2A 2D	2D+
    195	      2D 2A 20 20 20 20	20+
    196	      20 20 20 20 20 20	20+
    197	      20 20 20 20 20 20	20+
    198	      20 20 20 20 20 20	20+
    199	      20 20 20 20 20 20	20+
    200	      20 20 20
    201	0348  20 33 20 7C 20 20	20+	     db	' 3 |	|   |	|   |	|   |	|   |	|   |					 ' ;+
    202	      7C 20 20 20 7C 20	20+  08
    203	      20 7C 20 20 20 7C	20+
    204	      20 20 7C 20 20 20	7C+
    205	      20 20 20 7C 20 20	20+
    206	      7C 20 20 20 7C 20	20+
    207	      20 7C 20 20 20 20	20+
    208	      20 20 20 20 20 20	20+
    209	      20 20 20 20 20 20	20+
    210	      20 20 20 20 20 20	20+
    211	      20 20 20 20 20 20	20+
    212	      20 20 20
    213	0398  20 20 20 2A 2D 2D	2D+	     db	'   *---*---*---*---*---*---*---*---*---*---*	#Painel	de Controle		 ' ;+
    214	      2A 2D 2D 2D 2A 2D	2D+  09
    215	      2D 2A 2D 2D 2D 2A	2D+
    216	      2D 2D 2A 2D 2D 2D	2A+
    217	      2D 2D 2D 2A 2D 2D	2D+
    218	      2A 2D 2D 2D 2A 2D	2D+
    219	      2D 2A 20 20 20 23	50+
    220	      61 69 6E 65 6C 20	64+
    221	      65 20 43 6F 6E 74	72+
    222	      6F 6C 65 20 20 20	20+
    223	      20 20 20 20 20 20	20+
    224	      20 20 20
    225	03E8  20 34 20 7C 20 20	20+	     db	' 4 |	|   |	|   |	|   |	|   |	|   |	Linha:	 01			 ' ;+
    226	      7C 20 20 20 7C 20	20+  10
    227	      20 7C 20 20 20 7C	20+
    228	      20 20 7C 20 20 20	7C+
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 5
minado.ASM



    229	      20 20 20 7C 20 20	20+
    230	      7C 20 20 20 7C 20	20+
    231	      20 7C 20 20 20 4C	69+
    232	      6E 68 61 3A 20 20	20+
    233	      30 31 20 20 20 20	20+
    234	      20 20 20 20 20 20	20+
    235	      20 20 20 20 20 20	20+
    236	      20 20 20
    237	0438  20 20 20 2A 2D 2D	2D+	     db	'   *---*---*---*---*---*---*---*---*---*---*	Coluna:	 01			 ' ;+
    238	      2A 2D 2D 2D 2A 2D	2D+  11
    239	      2D 2A 2D 2D 2D 2A	2D+
    240	      2D 2D 2A 2D 2D 2D	2A+
    241	      2D 2D 2D 2A 2D 2D	2D+
    242	      2A 2D 2D 2D 2A 2D	2D+
    243	      2D 2A 20 20 20 43	6F+
    244	      6C 75 6E 61 3A 20	20+
    245	      30 31 20 20 20 20	20+
    246	      20 20 20 20 20 20	20+
    247	      20 20 20 20 20 20	20+
    248	      20 20 20
    249	0488  20 35 20 7C 20 20	20+	     db	' 5 |	|   |	|   |	|   |	|   |	|   |	Abrir(A)/Marcar(M): [M]		 ' ;+
    250	      7C 20 20 20 7C 20	20+  12
    251	      20 7C 20 20 20 7C	20+
    252	      20 20 7C 20 20 20	7C+
    253	      20 20 20 7C 20 20	20+
    254	      7C 20 20 20 7C 20	20+
    255	      20 7C 20 20 20 41	62+
    256	      72 69 72 28 41 29	2F+
    257	      4D 61 72 63 61 72	28+
    258	      4D 29 3A 20 5B 4D	5D+
    259	      20 20 20 20 20 20	20+
    260	      20 20 20
    261	04D8  20 20 20 2A 2D 2D	2D+	     db	'   *---*---*---*---*---*---*---*---*---*---*					 ' ;+
    262	      2A 2D 2D 2D 2A 2D	2D+  13
    263	      2D 2A 2D 2D 2D 2A	2D+
    264	      2D 2D 2A 2D 2D 2D	2A+
    265	      2D 2D 2D 2A 2D 2D	2D+
    266	      2A 2D 2D 2D 2A 2D	2D+
    267	      2D 2A 20 20 20 20	20+
    268	      20 20 20 20 20 20	20+
    269	      20 20 20 20 20 20	20+
    270	      20 20 20 20 20 20	20+
    271	      20 20 20 20 20 20	20+
    272	      20 20 20
    273	0528  20 36 20 7C 20 20	20+	     db	' 6 |	|   |	|   |	|   |	|   |	|   |					 ' ;+
    274	      7C 20 20 20 7C 20	20+  14
    275	      20 7C 20 20 20 7C	20+
    276	      20 20 7C 20 20 20	7C+
    277	      20 20 20 7C 20 20	20+
    278	      7C 20 20 20 7C 20	20+
    279	      20 7C 20 20 20 20	20+
    280	      20 20 20 20 20 20	20+
    281	      20 20 20 20 20 20	20+
    282	      20 20 20 20 20 20	20+
    283	      20 20 20 20 20 20	20+
    284	      20 20 20
    285	0578  20 20 20 2A 2D 2D	2D+	     db	'   *---*---*---*---*---*---*---*---*---*---*	#Como Usar:			 ' ;+
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 6
minado.ASM



    286	      2A 2D 2D 2D 2A 2D	2D+  15
    287	      2D 2A 2D 2D 2D 2A	2D+
    288	      2D 2D 2A 2D 2D 2D	2A+
    289	      2D 2D 2D 2A 2D 2D	2D+
    290	      2A 2D 2D 2D 2A 2D	2D+
    291	      2D 2A 20 20 20 23	43+
    292	      6F 6D 6F 20 55 73	61+
    293	      72 3A 20 20 20 20	20+
    294	      20 20 20 20 20 20	20+
    295	      20 20 20 20 20 20	20+
    296	      20 20 20
    297	05C8  20 37 20 7C 20 20	20+	     db	' 7 |	|   |	|   |	|   |	|   |	|   |	> TAB para alternar entre A/M	 ' ;+
    298	      7C 20 20 20 7C 20	20+  16
    299	      20 7C 20 20 20 7C	20+
    300	      20 20 7C 20 20 20	7C+
    301	      20 20 20 7C 20 20	20+
    302	      7C 20 20 20 7C 20	20+
    303	      20 7C 20 20 20 3E	20+
    304	      54 41 42 20 70 61	72+
    305	      61 20 61 6C 74 65	72+
    306	      6E 61 72 20 65 6E	74+
    307	      72 65 20 41 2F 4D	20+
    308	      20 20 20
    309	0618  20 20 20 2A 2D 2D	2D+	     db	'   *---*---*---*---*---*---*---*---*---*---*	> SETAS	para percorrer o campo	 ' ;+
    310	      2A 2D 2D 2D 2A 2D	2D+  17
    311	      2D 2A 2D 2D 2D 2A	2D+
    312	      2D 2D 2A 2D 2D 2D	2A+
    313	      2D 2D 2D 2A 2D 2D	2D+
    314	      2A 2D 2D 2D 2A 2D	2D+
    315	      2D 2A 20 20 20 3E	20+
    316	      53 45 54 41 53 20	70+
    317	      61 72 61 20 70 65	72+
    318	      63 6F 72 72 65 72	20+
    319	      6F 20 63 61 6D 70	6F+
    320	      20 20 20
    321	0668  20 38 20 7C 20 20	20+	     db	' 8 |	|   |	|   |	|   |	|   |	|   |	> ENTER	para (A)brir/(M)arcar	 ' ;+
    322	      7C 20 20 20 7C 20	20+  18
    323	      20 7C 20 20 20 7C	20+
    324	      20 20 7C 20 20 20	7C+
    325	      20 20 20 7C 20 20	20+
    326	      7C 20 20 20 7C 20	20+
    327	      20 7C 20 20 20 3E	20+
    328	      45 4E 54 45 52 20	70+
    329	      61 72 61 20 28 41	29+
    330	      62 72 69 72 2F 28	4D+
    331	      29 61 72 63 61 72	20+
    332	      20 20 20
    333	06B8  20 20 20 2A 2D 2D	2D+	     db	'   *---*---*---*---*---*---*---*---*---*---*					 ' ;+
    334	      2A 2D 2D 2D 2A 2D	2D+  19
    335	      2D 2A 2D 2D 2D 2A	2D+
    336	      2D 2D 2A 2D 2D 2D	2A+
    337	      2D 2D 2D 2A 2D 2D	2D+
    338	      2A 2D 2D 2D 2A 2D	2D+
    339	      2D 2A 20 20 20 20	20+
    340	      20 20 20 20 20 20	20+
    341	      20 20 20 20 20 20	20+
    342	      20 20 20 20 20 20	20+
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 7
minado.ASM



    343	      20 20 20 20 20 20	20+
    344	      20 20 20
    345	0708  20 39 20 7C 20 20	20+	     db	' 9 |	|   |	|   |	|   |	|   |	|   |					 ' ;+
    346	      7C 20 20 20 7C 20	20+  20
    347	      20 7C 20 20 20 7C	20+
    348	      20 20 7C 20 20 20	7C+
    349	      20 20 20 7C 20 20	20+
    350	      7C 20 20 20 7C 20	20+
    351	      20 7C 20 20 20 20	20+
    352	      20 20 20 20 20 20	20+
    353	      20 20 20 20 20 20	20+
    354	      20 20 20 20 20 20	20+
    355	      20 20 20 20 20 20	20+
    356	      20 20 20
    357	0758  20 20 20 2A 2D 2D	2D+	     db	'   *---*---*---*---*---*---*---*---*---*---*	Mensagens:			 ' ;+
    358	      2A 2D 2D 2D 2A 2D	2D+  21
    359	      2D 2A 2D 2D 2D 2A	2D+
    360	      2D 2D 2A 2D 2D 2D	2A+
    361	      2D 2D 2D 2A 2D 2D	2D+
    362	      2A 2D 2D 2D 2A 2D	2D+
    363	      2D 2A 20 20 20 4D	65+
    364	      6E 73 61 67 65 6E	73+
    365	      3A 20 20 20 20 20	20+
    366	      20 20 20 20 20 20	20+
    367	      20 20 20 20 20 20	20+
    368	      20 20 20
    369	07A8  31 30 20 7C 20 20	20+	     db	'10 |	|   |	|   |	|   |	|   |	|   |					 ' ;+
    370	      7C 20 20 20 7C 20	20+  22
    371	      20 7C 20 20 20 7C	20+
    372	      20 20 7C 20 20 20	7C+
    373	      20 20 20 7C 20 20	20+
    374	      7C 20 20 20 7C 20	20+
    375	      20 7C 20 20 20 20	20+
    376	      20 20 20 20 20 20	20+
    377	      20 20 20 20 20 20	20+
    378	      20 20 20 20 20 20	20+
    379	      20 20 20 20 20 20	20+
    380	      20 20 20
    381	07F8  20 20 20 2A 2D 2D	2D+	     db	'   *---*---*---*---*---*---*---*---*---*---*					 ' ;+
    382	      2A 2D 2D 2D 2A 2D	2D+  23
    383	      2D 2A 2D 2D 2D 2A	2D+
    384	      2D 2D 2A 2D 2D 2D	2A+
    385	      2D 2D 2D 2A 2D 2D	2D+
    386	      2A 2D 2D 2D 2A 2D	2D+
    387	      2D 2A 20 20 20 20	20+
    388	      20 20 20 20 20 20	20+
    389	      20 20 20 20 20 20	20+
    390	      20 20 20 20 20 20	20+
    391	      20 20 20 20 20 20	20+
    392	      20 20 20
    393	0848  20 20 20 20 20 20	20+	     db	'										$' ;+
    394	      20 20 20 20 20 20	20+  24
    395	      20 20 20 20 20 20	20+
    396	      20 20 20 20 20 20	20+
    397	      20 20 20 20 20 20	20+
    398	      20 20 20 20 20 20	20+
    399	      20 20 20 20 20 20	20+
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 8
minado.ASM



    400	      20 20 20 20 20 20	20+
    401	      20 20 20 20 20 20	20+
    402	      20 20 20 20 20 20	20+
    403	      20 20 20 20 20 20	20+
    404	      20 20 24
    405					     ;	 01234567890123456789012345678901234567890123456789012345678901234567890123456789
    406	0898  5B 24			     pos_campo1				     db	'[$'
    407	089A  5D 24			     pos_campo2				     db	']$'
    408	089C  20 24			     pos_campo_vazio		     db	' $'
    409
    410					     ; Mensagens
    411	089E  20 24			     msg_limpa_char		     db	' $'
    412	08A0  20 20 20 20 20 20	20+	     msg_limpa_linha		     db	'				  $'
    413	      20 20 20 20 20 20	20+
    414	      20 20 20 20 20 20	20+
    415	      20 20 20 20 20 20	20+
    416	      20 20 20 20 20 24
    417	08C2  50 6F 73 69 63 61	6F+	     msg_posicao_marcada	     db	'Posicao marcada com sucesso.$'
    418	      20 6D 61 72 63 61	64+
    419	      61 20 63 6F 6D 20	73+
    420	      75 63 65 73 73 6F	2E+
    421	      24
    422	08DF  50 6F 73 69 63 61	6F+	     msg_posicao_desmarcada  db	'Posicao desmarcada com	sucesso.$'
    423	      20 64 65 73 6D 61	72+
    424	      63 61 64 61 20 63	6F+
    425	      6D 20 73 75 63 65	73+
    426	      73 6F 2E 24
    427	08FF  4D 61 72 63 61 63	61+	     msg_muita_marcacao		     db	'Marcacao nao e	mais permitida.$'
    428	      6F 20 6E 61 6F 20	65+
    429	      20 6D 61 69 73 20	70+
    430	      65 72 6D 69 74 69	64+
    431	      61 2E 24
    432	091E  4F 20 70 72 6F 67	72+	     msg_fim				     db	'O programa est',0A0H,'	sendo fechado.$'
    433	      61 6D 61 20 65 73	74+
    434	      A0 20 73 65 6E 64	6F+
    435	      20 66 65 63 68 61	64+
    436	      6F 2E 24
    437	093D  4F 62 72 69 67 61	64+	     msg_fim_thanks		     db	'Obrigado por jogar!$'
    438	      6F 20 70 6F 72 20	6A+
    439	      6F 67 61 72 21 24
    440	0951  56 6F 63 65 20 65	78+	     msg_explodiu		     db	'Voce explodiu.	GAME OVER!!$'
    441	      70 6C 6F 64 69 75	2E+
    442	      20 47 41 4D 45 20	4F+
    443	      56 45 52 21 21 24
    444	096C  56 6F 63 65 20 67	61+	     msg_ganhou				     db	'Voce ganhou. Parabens!!$'
    445	      6E 68 6F 75 2E 20	50+
    446	      61 72 61 62 65 6E	73+
    447	      21 21 24
    448	0984  41 70 65 72 74 65	20+	     msg_aperta_enter		     db	'Aperte	ENTER para continuar.$'
    449	      45 4E 54 45 52 20	70+
    450	      61 72 61 20 63 6F	6E+
    451	      74 69 6E 75 61 72	2E+
    452	      24
    453	09A1  41 70 65 72 74 65	20+	     msg_t_para_terminar	     db	'Aperte	t para terminar.$'
    454	      74 20 70 61 72 61	20+
    455	      74 65 72 6D 69 6E	61+
    456	      72 2E 24
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 9
minado.ASM



    457	09B9  44 65 73 65 6A 61	20+	     msg_continuar		     db	'Deseja	jogar novamente?.$'
    458	      6A 6F 67 61 72 20	6E+
    459	      6F 76 61 6D 65 6E	74+
    460	      65 3F 2E 24
    461	09D2  53 69 6D 28 53 29	20+	     msg_confirmacao		     db	'Sim(S)	| Nao(N): $'
    462	      7C 20 4E 61 6F 28	4E+
    463	      29 3A 20 24
    464					     ;83D    53H     S
    465					     ;115D   73H     s
    466					     ;78D    4EH     N
    467					     ;110D   6EH     n
    468
    469
    470	09E4  4D 24			     opcao_marcar		     db	'M$'
    471	09E6  41 24			     opcao_abrir			     db	'A$'
    472	09E8  20 20			     linha_ascii			     db	'  '
    473	09EA  24				     fim_linha_ascii	     db	'$'
    474	09EB  20 20			     coluna_ascii		     db	'  '
    475	09ED  24				     fim_coluna_ascii	     db	'$'
    476	09EE  30 24			     zero				     db	'0$' ; caractere ASCII "0"
    477	09F0  31 24			     um						     db	'1$' ; caractere ASCII "1"
    478	09F2  20			     conteudo				     db	' '
    479	09F3  24				     conteudo_fim	     db	'$'
    480
    481					     ; Variáveis
    482	09F4  04			     linha_tela		     db	     4	     ; posição vertical	(linha)	do cursor na tela,  +
    483				     varia de 0	a 24
    484	09F5  05			     coluna_tela	     db	     5	     ; posição horizontal (coluna) do cursor na	    +
    485				     tela, varia de 0 a	79
    486	09F6  00			     linha_matriz    db	     0	     ; varia de	0 a 9
    487	09F7  00			     coluna_matriz   db	     0	     ; varia de	0 a 9
    488	09F8  00			     deslocamento    db	     0	     ; valor do	deslocamento para navegar dentro dos arrays +
    489				     'conteudo_matriz' e 'escolha_marcadores'
    490											     ; o valor será na forma		    +
    491				     (10*linha_matriz +	coluna_matriz)
    492	09F9  00			     asciicode		     db	     0	     ; para leitura do caractere     digitado
    493	09FA  00			     scancode		     db	     0	     ; para leitura do scancode	do caractere digitado
    494	09FB  4D			     selecao_AM		     db	 4DH ; 41H - A,	4DH - M
    495	09FC  00			     numero_minas    db	 0   ; vai sendo incrementado até o valor 15, chegando em 15 a	    +
    496				     geração de	números	randômicos estará concluída
    497	09FD  0F			     contador		     db	     15	 ; usado para contar o número de laços dentro da    +
    498				     subrotina calcula_posicoes
    499	09FE  64			     cont_posicoes   db	     100     ; vai sendo decrementado. Quando chegar em	zero quer   +
    500				     dizer que todo o campo foi	varrido
    501
    502					     ; Marcação	de minas
    503	09FF  00			     minas_marcadas  db	     0	     ; a cada posição marcada essa variável deve ser	    +
    504				     incrementada
    505	0A00  0F			     minas_a_marcar  db	 15  ; a cada posição marcada essa variável deve ser decrementada
    506	0A01  0F			     minas_totais    db	 15  ; a cada mina aberta ela é	decrementada em	uma unidade
    507
    508	0A02  00			     pode_terminar   db	     0	     ; quando estiver em 1 quer	dizer que o jogo pode acabar
    509	0A03  00			     explodiu		     db	     0	     ; quando foi 1 quer dizer que uma mina explodiu
    510	0A04  00			     voce_ganhou	     db	 0   ; quando estiver em 1 quer	dizer que o usuario ganhou o+
    511				     jogo
    512
    513					     ;---------------------------------------------------------*
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 10
minado.ASM



    514					     ; Dados para a funcao RAND	- copiar p/fim segmento	'dados'|
    515					     ;---------------------------------------------------------*
    516					     ; dados para 4 partidas, com sorteios duplos nas 2	1as   ;|
    517	0A05				     _@RNDvet label byte ; 8 minas por linha		      ;|
    518																    +
    519				     ;|
    520	0A05  01 01 02 02 03 03	04+		      DB  1, 1,	2, 2, 3, 3, 4, 4, 5, 5,	6, 6, 7, 7, 8, 8  ;|
    521	      04 05 05 06 06 07	07+
    522	      08 08
    523	0A15  09 09 0A 0A 0A 01	09+		      DB  9, 9,10,10,10, 1, 9, 2, 4, 4,	1, 9, 1,10, 2,10  ;|
    524	      02 04 04 01 09 01	0A+
    525	      02 0A
    526																    +
    527				     ;|
    528	0A25  02 02 02 03 02 04	02+		      DB  2, 2,	2, 3, 2, 4, 2, 5, 2, 6,	3, 2, 3, 4, 3, 6  ;|
    529	      05 02 06 03 02 03	04+
    530	      03 06
    531	0A35  04 02 04 03 04 04	04+		      DB  4, 2,	4, 3, 4, 4, 4, 5, 4, 6,	2, 5, 5, 2, 5, 6  ;|
    532	      05 04 06 02 05 05	02+
    533	      05 06
    534																    +
    535				     ;|
    536	0A45  01 02 03 04 05 06	07+		      DB  1, 2,	3, 4, 5, 6, 7, 8, 9,10,	2, 1, 4, 3, 6, 5  ;|
    537	      08 09 0A 02 01 04	03+
    538	      06 05
    539	0A55  08 07 0A 09 05 04	04+		      DB  8, 7,10, 9, 5, 4, 4, 9, 4, 6,	2, 5, 5, 2	  ;|
    540	      09 04 06 02 05 05	02
    541																    +
    542				     ;|
    543	0A63  03 05 03 06 03 07	03+		      DB  3, 5,	3, 6, 3, 7, 3, 8, 3, 9,	4, 5, 4, 6, 4, 7  ;|
    544	      08 03 09 04 05 04	06+
    545	      04 07
    546	0A73  04 08 04 09 05 05	05+		      DB  4, 8,	4, 9, 5, 5, 5, 6, 5, 7,	5, 8, 5, 9	  ;|
    547	      06 05 07 05 08 05	09
    548																    +
    549				     ;|
    550	      =007C			     _@RNDmax EQU  $-_@RNDvet				      ;|
    551	0A81  007C			     _@RNDcnt dw  _@RNDmax				      ;|
    552	0A83  0A05r			     _@RNDptr dw  _@RNDvet				      ;|
    553	0A85  0A05r			     _@RNDadr dw  _@RNDvet				      ;|
    554					     ;---------------------------------------------------------*
    555
    556	0A87			     dados ends
    557				     ; Segmento	de Dados - Declaração de Variáveis
    558
    559				     ;-----------------------------------------------------------------------------------------------
    560				     --------------------------
    561				     ;-----------------------------------------------------------------------------------------------
    562				     --------------------------
    563
    564				     ; Pilha
    565	0000			     pilha segment stack
    566	0000  0404*(????)		     dw	1028 dup(?)
    567	0808			     pilha ends
    568				     ; Pilha
    569
    570				     ;===============================================================================================
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 11
minado.ASM



    571				     ===========================
    572				     ;==							 Macros				    +
    573				     ==
    574				     ;===============================================================================================
    575				     ===========================
    576
    577				     posiciona macro lin,col ; usado para posições fixas
    578						     push dx
    579						     push cx
    580						     push bx
    581						     push ax
    582					     mov dh,lin	     ; linha
    583					     mov dl,col	     ; coluna
    584					     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
    585				     zero - valor em bh
    586						     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
    587						     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
    588						     pop ax
    589						     pop bx
    590						     pop cx
    591						     pop dx
    592				     endm
    593
    594				     ;-----------------------------------------------------------------------------------------------
    595				     --------------------------
    596				     ;-----------------------------------------------------------------------------------------------
    597				     --------------------------
    598
    599				     escreve macro mensagem
    600						     push dx
    601						     push ax
    602						     lea dx,mensagem
    603						     mov ah,9 ;	configura serviço de saída para	"Saída de String"
    604						     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
    605						     pop ax
    606						     pop dx
    607				     endm
    608
    609				     ;-----------------------------------------------------------------------------------------------
    610				     --------------------------
    611				     ;-----------------------------------------------------------------------------------------------
    612				     --------------------------
    613
    614				     limpa_tela	macro ;	limpa toda a tela
    615						 push ax
    616						     push bx
    617						     push cx
    618						     push dx
    619						     mov ch,0	     ; linha superior esquerda = 0
    620						     mov cl,0	     ; coluna superior esquerda	= 0
    621						     mov dh,24	     ; linha inferior direita =	24
    622						     mov dl,79	     ; coluna inferior direita = 79
    623						     mov bh,00001111B ;	define fundo de	tela preto não piscante	e letras brancas
    624						     mov al,25	     ; rola a tela 25 linhas para cima,	ou seja, limpa a tela
    625						     mov ah,6	     ; configura serviço de vídeo para "Rolagem	de janela para cima"
    626						     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
    627						     pop dx
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 12
minado.ASM



    628						     pop cx
    629						     pop bx
    630						     pop ax
    631				     endm
    632
    633				     ;-----------------------------------------------------------------------------------------------
    634				     --------------------------
    635				     ;-----------------------------------------------------------------------------------------------
    636				     --------------------------
    637
    638				     exclui_marcador macro ; exclui o marcador '[ ]' da	posição	atual
    639						     dec coluna_tela
    640						     ; seta posição do cursor para escreve mensagem '	 $' na posição atual do	    +
    641				     cursor
    642						     mov dh,linha_tela
    643						     mov dl,coluna_tela
    644						     mov bh,0
    645						     mov ah,2
    646						     int 10H
    647						     ; escreve a mensagem '    $'
    648						     escreve pos_campo_vazio
    649						     add coluna_tela,2
    650						     posiciona linha_tela,coluna_tela
    651						     escreve pos_campo_vazio
    652						     sub coluna_tela,2
    653						     posiciona linha_tela,coluna_tela
    654				     endm
    655
    656				     ;-----------------------------------------------------------------------------------------------
    657				     --------------------------
    658				     ;-----------------------------------------------------------------------------------------------
    659				     --------------------------
    660
    661				     pega_coordenadas macro
    662						     ; linha_tela e coluna_tela	tem a posição de tela do cursor
    663						     ; linha_matriz e coluna_matriz tem	a posição do cursor na matriz
    664						     push ax
    665						     push dx
    666						     push bx
    667						     ; # obter coordenada de linha da matriz, pela coordenada de linha da tela:	    +
    668				     linha_matriz = (linha_tela-2)/2
    669						     mov dl,linha_tela
    670						     mov linha_matriz,dl
    671						     sub linha_matriz,2
    672						     shr linha_matriz,1	; divide linha_matriz por 2
    673						     ; # obter coordenada de coluna da matriz, pela coordenada de coluna da tela:   +
    674				     coluna_matriz = (coluna_tela-1)/4
    675						     mov dl,coluna_tela
    676						     mov coluna_matriz,dl
    677						     dec coluna_matriz
    678						     shr coluna_matriz,2 ; divide linha_matriz por 2 (faz dois shifts)
    679						     pop bx
    680						     pop dx
    681						     pop ax
    682				     endm
    683
    684
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 13
minado.ASM



    685				     ;-----------------------------------------------------------------------------------------------
    686				     --------------------------
    687				     ;-----------------------------------------------------------------------------------------------
    688				     --------------------------
    689
    690				     pega_coordenadas_tela macro
    691						     ; linha_tela e coluna_tela	tem a posição de tela do cursor
    692						     ; linha_matriz e coluna_matriz tem	a posição do cursor na matriz
    693						     push ax
    694						     push dx
    695						     push bx
    696						     ; # obter coordenada de linha da tela, pela coordenada de linha da	matriz:	    +
    697				     linha_tela	= 2 + linha_tela*2
    698						     mov dl,linha_matriz
    699						     mov linha_tela,dl
    700						     shl linha_tela,1 ;	mutiplica por dois
    701						     add linha_tela,2 ;	soma dois
    702						     ; # obter coordenada de coluna da tela, pela coordenada de	coluna da matriz:   +
    703				     coluna_tela = 1 + coluna_tela*4
    704						     mov dl,coluna_matriz
    705						     mov coluna_tela,dl
    706						     shl coluna_tela,2 ; multiplica por	4
    707						     inc coluna_tela
    708						     pop bx
    709						     pop dx
    710						     pop ax
    711				     endm
    712
    713				     ;-----------------------------------------------------------------------------------------------
    714				     --------------------------
    715				     ;-----------------------------------------------------------------------------------------------
    716				     --------------------------
    717
    718				     espera_tecla_teste	macro
    719						     push ax
    720						     push cx
    721						     push dx
    722						     push bx
    723					     mov ah,0		    ; funcao esperar tecla no AH
    724					     int 16h		    ; chamada do DOS
    725					     pop bx
    726						     pop dx
    727						     pop cx
    728						     pop ax
    729				     endm
    730
    731				     ;-----------------------------------------------------------------------------------------------
    732				     --------------------------
    733				     ;-----------------------------------------------------------------------------------------------
    734				     --------------------------
    735
    736				     limpa_arrays macro	; zera os array	'conteudo_matriz' e 'escolha_marcadores'
    737						     push ax
    738						     push bx
    739						     push cx
    740						     push dx
    741						     mov cont_posicoes,100
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 14
minado.ASM



    742						     lea di,conteudo_matriz
    743						     lea si,escolha_marcadores
    744					     limpa_arrays_denovo:
    745						     mov byte ptr [di],0
    746						     mov byte ptr [si],0
    747						     inc di
    748						     inc si
    749						     dec cont_posicoes
    750						     cmp cont_posicoes,0
    751						     jne limpa_arrays_denovo
    752						     pop dx
    753						     pop cx
    754						     pop bx
    755						     pop ax
    756				     endm
    757
    758
    759				     ;===============================================================================================
    760				     ===========================
    761				     ;==					       Programa	Principal			    +
    762				     ==
    763				     ;===============================================================================================
    764				     ===========================
    765
    766	0000			     program segment
    767
    768	0000				     inicio: ; CS e IP saoinicializados	com este endereco
    769	0000  B8 0000s				     mov     ax,dados ;	inicializa DS
    770	0003  8E D8			     mov     ds,ax    ;	com endereco do	segmento DADOS
    771	0005  8E C0				     mov es,ax	  ; idem em ES
    772	0007				     inicializa_variaveis:
    773						     limpa_arrays
1   774	0007  50				     push ax
1   775	0008  53				     push bx
1   776	0009  51				     push cx
1   777	000A  52				     push dx
1   778	000B  C6 06 09FEr 64			     mov cont_posicoes,100
1   779	0010  BF 0000r				     lea di,conteudo_matriz
1   780	0013  BE 0064r				     lea si,escolha_marcadores
1   781	0016				     limpa_arrays_denovo:
1   782	0016  C6 05 00				     mov byte ptr [di],0
1   783	0019  C6 04 00				     mov byte ptr [si],0
1   784	001C  47				     inc di
1   785	001D  46				     inc si
1   786	001E  FE 0E 09FEr			     dec cont_posicoes
1   787	0022  80 3E 09FEr 00			     cmp cont_posicoes,0
1   788	0027  75 ED				     jne limpa_arrays_denovo
1   789	0029  5A				     pop dx
1   790	002A  59				     pop cx
1   791	002B  5B				     pop bx
1   792	002C  58				     pop ax
    793	002D  C6 06 09F4r 04			     mov linha_tela,4
    794	0032  C6 06 09F5r 05			     mov coluna_tela,5
    795	0037  C6 06 09F6r 00			     mov linha_matriz,0
    796	003C  C6 06 09F7r 00			     mov coluna_matriz,0
    797	0041  C6 06 09F8r 00			     mov deslocamento,0
    798	0046  C6 06 09F9r 00			     mov asciicode,0
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 15
minado.ASM



    799	004B  C6 06 09FAr 00			     mov scancode,0
    800	0050  C6 06 09FBr 4D			     mov selecao_AM,4DH
    801	0055  C6 06 09FCr 00			     mov numero_minas,0
    802	005A  C6 06 09FDr 0F			     mov contador,15
    803	005F  C6 06 09FEr 64			     mov cont_posicoes,100
    804	0064  C6 06 09FFr 00			     mov minas_marcadas,0
    805	0069  C6 06 0A00r 0F			     mov minas_a_marcar,15
    806	006E  C6 06 0A01r 0F			     mov minas_totais,15
    807	0073  C6 06 0A02r 00			     mov pode_terminar,0
    808	0078  C6 06 0A03r 00			     mov explodiu,0
    809	007D  C6 06 0A04r 00			     mov voce_ganhou,0
    810	0082				     inicializa_tela:
    811	0082  C6 06 0A02r 00			     mov pode_terminar,0
    812	0087  C6 06 0A03r 00			     mov explodiu,0
    813	008C  C6 06 0A04r 00			     mov voce_ganhou,0
    814						     posiciona 0,0
1   815	0091  52				     push dx
1   816	0092  51				     push cx
1   817	0093  53				     push bx
1   818	0094  50				     push ax
1   819	0095  B6 00			     mov dh,0	     ; linha
1   820	0097  B2 00			     mov dl,0	     ; coluna
1   821	0099  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
    822				     zero - valor em bh
1   823	009B  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1   824	009D  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1   825	009F  58				     pop ax
1   826	00A0  5B				     pop bx
1   827	00A1  59				     pop cx
1   828	00A2  5A				     pop dx
    829						     limpa_tela
1   830	00A3  50				 push ax
1   831	00A4  53				     push bx
1   832	00A5  51				     push cx
1   833	00A6  52				     push dx
1   834	00A7  B5 00				     mov ch,0	     ; linha superior esquerda = 0
1   835	00A9  B1 00				     mov cl,0	     ; coluna superior esquerda	= 0
1   836	00AB  B6 18				     mov dh,24	     ; linha inferior direita =	24
1   837	00AD  B2 4F				     mov dl,79	     ; coluna inferior direita = 79
1   838	00AF  B7 0F				     mov bh,00001111B ;	define fundo de	tela preto não piscante	e letras brancas
1   839	00B1  B0 19				     mov al,25	     ; rola a tela 25 linhas para cima,	ou seja, limpa a tela
1   840	00B3  B4 06				     mov ah,6	     ; configura serviço de vídeo para "Rolagem	de janela para cima"
1   841	00B5  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1   842	00B7  5A				     pop dx
1   843	00B8  59				     pop cx
1   844	00B9  5B				     pop bx
1   845	00BA  58				     pop ax
    846						     escreve tela		     ; inicializa a tela
1   847	00BB  52				     push dx
1   848	00BC  50				     push ax
1   849	00BD  BA 00C8r				     lea dx,tela
1   850	00C0  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1   851	00C2  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1   852	00C4  58				     pop ax
1   853	00C5  5A				     pop dx
    854	00C6				     inicializa_minas:
    855	00C6  E8 0536				     call RAND				     ; obtem coordenada	de linha
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 16
minado.ASM



    856	00C9  88 16 09F6r			     mov linha_matriz,dl     ; e salva numa variável
    857	00CD  E8 052F				     call RAND				     ; obtem coordenada	de coluna
    858	00D0  88 16 09F7r			     mov coluna_matriz,dl    ; e salva noutra variável
    859	00D4  FE 0E 09F6r			     dec linha_matriz		     ; deixa 'linha_matriz' na faixa de	0 a 9
    860	00D8  FE 0E 09F7r			     dec coluna_matriz		     ; deixa 'coluna_matriz' na	faixa de 0 a 9
    861						     ; trabalhando encima do array de conteudo_matriz
    862	00DC  BF 0000r				     lea di,conteudo_matriz  ; pega o endereço de início do array 'conteudo_matriz',+
    863				     ou	seja, conteudo_matriz[0]
    864	00DF  A0 09F6r				     mov al,linha_matriz
    865	00E2  C6 06 09F8r 0A			     mov deslocamento,10
    866	00E7  F6 26 09F8r			     mul deslocamento		     ; realiza o produto entre al e deslocamento,   +
    867				     resultado em ax
    868	00EB  02 06 09F7r			     add al,coluna_matriz    ; como o resultado	da multiplicação nunca vai	    +
    869				     ultrapassar 99, então o resultado estará na parte baixa do	ax, ou seja, al
    870	00EF  A2 09F8r				     mov deslocamento,al
    871	00F2  A0 09F8r				     mov al,deslocamento
    872	00F5  98				     cbw				     ; converte	al para	ax
    873	00F6  03 F8				     add di,ax
    874	00F8  80 3D FF				     cmp byte ptr [di],-1
    875	00FB  74 C9				     je	inicializa_minas	     ; já tem mina na posição testada do array,	pega+
    876				     outro par de coordenadas
    877	00FD  C6 05 FF				     mov byte ptr [di],-1    ; coloca uma mina na posição apontada pelo	registrador +
    878				     bx, ou seja, [bx]
    879	0100  FE 06 09FCr			     inc numero_minas
    880	0104  80 3E 09FCr 0F			     cmp numero_minas,15
    881	0109  75 BB				     jne     inicializa_minas	     ; se não é	igual quer dizer que ainda não gerou+
    882				     15	minas, logo volta e gera mais coordenadas
    883	010B  E8 090E				     call calcula_posicoes
    884						     ;call imprimir_conteudo_matriz
    885	010E  C6 06 09F4r 04			     mov linha_tela,4
    886	0113  C6 06 09F5r 05			     mov coluna_tela,5
    887						     posiciona 4,5
1   888	0118  52				     push dx
1   889	0119  51				     push cx
1   890	011A  53				     push bx
1   891	011B  50				     push ax
1   892	011C  B6 04			     mov dh,4	     ; linha
1   893	011E  B2 05			     mov dl,5	     ; coluna
1   894	0120  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
    895				     zero - valor em bh
1   896	0122  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1   897	0124  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1   898	0126  58				     pop ax
1   899	0127  5B				     pop bx
1   900	0128  59				     pop cx
1   901	0129  5A				     pop dx
    902	012A				     denovo:					     ; espera uma tecla	ser apertada
    903	012A  80 3E 0A03r 00			     cmp explodiu,0
    904	012F  74 05				     je	continua_denovo
    905	0131  E9 0237 90 90			     jmp far ptr fim_programa
    906	0136				     continua_denovo:
    907						     pega_coordenadas
1   908	0136  50				     push ax
1   909	0137  52				     push dx
1   910	0138  53				     push bx
1   911	0139  8A 16 09F4r			     mov dl,linha_tela
1   912	013D  88 16 09F6r			     mov linha_matriz,dl
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 17
minado.ASM



1   913	0141  80 2E 09F6r 02			     sub linha_matriz,2
1   914	0146  D0 2E 09F6r			     shr linha_matriz,1	; divide linha_matriz por 2
1   915	014A  8A 16 09F5r			     mov dl,coluna_tela
1   916	014E  88 16 09F7r			     mov coluna_matriz,dl
1   917	0152  FE 0E 09F7r			     dec coluna_matriz
1   918	0156  D0 2E 09F7r D0 2E	  +		     shr coluna_matriz,2 ; divide linha_matriz por 2 (faz dois shifts)
    919	      09F7r
1   920	015E  5B				     pop bx
1   921	015F  5A				     pop dx
1   922	0160  58				     pop ax
    923	0161  E8 0D2B				     call escreve_coordenadas
    924	0164  E8 04B8				     call espera_tecla
    925	0167  A2 09F9r				     mov asciicode,al		     ; guarda codigo ASCII do caractere
    926	016A  88 26 09FAr		     mov scancode,ah		     ; guarda codigo de	varredura da tecla
    927	016E				     testa_t:
    928	016E  80 3E 0A02r 01			     cmp pode_terminar,1
    929	0173  75 0F				     jne testa_tab
    930	0175  80 3E 09F9r 74			     cmp asciicode,T
    931	017A  75 08				     jne testa_tab
    932	017C  E8 04A5				     call trata_t
    933	017F  E9 01E9 90 90			     jmp far ptr fim_programa
    934	0184				 testa_tab:
    935	0184  80 3E 09F9r 09			     cmp asciicode,TAB		     ; cmp faz asciicode - TAB
    936	0189  75 05				     jne testa_enter		     ; vai para	testa_enter se a diferença da	    +
    937				     subtração for diferente de	zero
    938	018B  E8 0AD6				     call trata_tab
    939	018E  EB 9A				     jmp denovo
    940	0190				     testa_enter:
    941	0190  80 3E 09F9r 0D			     cmp asciicode,SEND		     ; cmp faz asciicode - SEND
    942	0195  75 05				     jne testa_direcional    ; vai para	testa_direcional se a diferença	da subtração+
    943				     for diferente de zero
    944	0197  E8 04BA				     call trata_enter
    945	019A  EB 8E				     jmp denovo
    946	019C				     testa_direcional:
    947	019C  80 3E 09F9r 00			     cmp asciicode,DIRECIONAL	     ; cmp faz asciicode - DIRECIONAL
    948	01A1  74 05				     je	testa_up		     ; vai para	testa_up se a diferença	da subtração+
    949				     for igual de zero
    950	01A3  E9 01B8 90 90			     jmp far ptr testa_esc
    951	01A8					     testa_up:
    952	01A8  80 3E 09FAr 48				     cmp scancode,UP
    953	01AD  75 67					     jne testa_down
    954	01AF  E8 0B19					     call trata_up
    955
    956							     posiciona linha_tela,coluna_tela
1   957	01B2  52				     push dx
1   958	01B3  51				     push cx
1   959	01B4  53				     push bx
1   960	01B5  50				     push ax
1   961	01B6  8A 36 09F4r		     mov dh,linha_tela	     ; linha
1   962	01BA  8A 16 09F5r		     mov dl,coluna_tela	     ; coluna
1   963	01BE  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
    964				     zero - valor em bh
1   965	01C0  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1   966	01C2  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1   967	01C4  58				     pop ax
1   968	01C5  5B				     pop bx
1   969	01C6  59				     pop cx
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 18
minado.ASM



1   970	01C7  5A				     pop dx
    971							     escreve pos_campo1	     ; escreve o selecionador na nova posição do    +
    972				     cursor
1   973	01C8  52				     push dx
1   974	01C9  50				     push ax
1   975	01CA  BA 0898r				     lea dx,pos_campo1
1   976	01CD  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1   977	01CF  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1   978	01D1  58				     pop ax
1   979	01D2  5A				     pop dx
    980	01D3  80 06 09F5r 02				     add coluna_tela,2
    981							     posiciona linha_tela,coluna_tela
1   982	01D8  52				     push dx
1   983	01D9  51				     push cx
1   984	01DA  53				     push bx
1   985	01DB  50				     push ax
1   986	01DC  8A 36 09F4r		     mov dh,linha_tela	     ; linha
1   987	01E0  8A 16 09F5r		     mov dl,coluna_tela	     ; coluna
1   988	01E4  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
    989				     zero - valor em bh
1   990	01E6  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1   991	01E8  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1   992	01EA  58				     pop ax
1   993	01EB  5B				     pop bx
1   994	01EC  59				     pop cx
1   995	01ED  5A				     pop dx
    996							     escreve pos_campo2
1   997	01EE  52				     push dx
1   998	01EF  50				     push ax
1   999	01F0  BA 089Ar				     lea dx,pos_campo2
1  1000	01F3  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  1001	01F5  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  1002	01F7  58				     pop ax
1  1003	01F8  5A				     pop dx
   1004	01F9  FE 0E 09F5r				     dec coluna_tela
   1005							     posiciona linha_tela,coluna_tela
1  1006	01FD  52				     push dx
1  1007	01FE  51				     push cx
1  1008	01FF  53				     push bx
1  1009	0200  50				     push ax
1  1010	0201  8A 36 09F4r		     mov dh,linha_tela	     ; linha
1  1011	0205  8A 16 09F5r		     mov dl,coluna_tela	     ; coluna
1  1012	0209  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1013				     zero - valor em bh
1  1014	020B  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1015	020D  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1016	020F  58				     pop ax
1  1017	0210  5B				     pop bx
1  1018	0211  59				     pop cx
1  1019	0212  5A				     pop dx
   1020
   1021	0213  E9 FF14					     jmp denovo
   1022	0216					     testa_down:
   1023	0216  80 3E 09FAr 50				     cmp scancode,DOWN
   1024	021B  75 67					     jne testa_left
   1025	021D  E8 0B1C					     call trata_down
   1026
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 19
minado.ASM



   1027							     posiciona linha_tela,coluna_tela
1  1028	0220  52				     push dx
1  1029	0221  51				     push cx
1  1030	0222  53				     push bx
1  1031	0223  50				     push ax
1  1032	0224  8A 36 09F4r		     mov dh,linha_tela	     ; linha
1  1033	0228  8A 16 09F5r		     mov dl,coluna_tela	     ; coluna
1  1034	022C  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1035				     zero - valor em bh
1  1036	022E  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1037	0230  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1038	0232  58				     pop ax
1  1039	0233  5B				     pop bx
1  1040	0234  59				     pop cx
1  1041	0235  5A				     pop dx
   1042							     escreve pos_campo1	     ; escreve o selecionador na nova posição do    +
   1043				     cursor
1  1044	0236  52				     push dx
1  1045	0237  50				     push ax
1  1046	0238  BA 0898r				     lea dx,pos_campo1
1  1047	023B  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  1048	023D  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  1049	023F  58				     pop ax
1  1050	0240  5A				     pop dx
   1051	0241  80 06 09F5r 02				     add coluna_tela,2
   1052							     posiciona linha_tela,coluna_tela
1  1053	0246  52				     push dx
1  1054	0247  51				     push cx
1  1055	0248  53				     push bx
1  1056	0249  50				     push ax
1  1057	024A  8A 36 09F4r		     mov dh,linha_tela	     ; linha
1  1058	024E  8A 16 09F5r		     mov dl,coluna_tela	     ; coluna
1  1059	0252  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1060				     zero - valor em bh
1  1061	0254  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1062	0256  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1063	0258  58				     pop ax
1  1064	0259  5B				     pop bx
1  1065	025A  59				     pop cx
1  1066	025B  5A				     pop dx
   1067							     escreve pos_campo2
1  1068	025C  52				     push dx
1  1069	025D  50				     push ax
1  1070	025E  BA 089Ar				     lea dx,pos_campo2
1  1071	0261  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  1072	0263  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  1073	0265  58				     pop ax
1  1074	0266  5A				     pop dx
   1075	0267  FE 0E 09F5r				     dec coluna_tela
   1076							     posiciona linha_tela,coluna_tela
1  1077	026B  52				     push dx
1  1078	026C  51				     push cx
1  1079	026D  53				     push bx
1  1080	026E  50				     push ax
1  1081	026F  8A 36 09F4r		     mov dh,linha_tela	     ; linha
1  1082	0273  8A 16 09F5r		     mov dl,coluna_tela	     ; coluna
1  1083	0277  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 20
minado.ASM



   1084				     zero - valor em bh
1  1085	0279  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1086	027B  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1087	027D  58				     pop ax
1  1088	027E  5B				     pop bx
1  1089	027F  59				     pop cx
1  1090	0280  5A				     pop dx
   1091
   1092	0281					     volta1:
   1093	0281  E9 FEA6					     jmp denovo
   1094	0284					     testa_left:
   1095	0284  80 3E 09FAr 4B				     cmp scancode,LEFT
   1096	0289  75 66					     jne testa_right
   1097	028B  E8 0B1F					     call trata_left
   1098
   1099							     posiciona linha_tela,coluna_tela
1  1100	028E  52				     push dx
1  1101	028F  51				     push cx
1  1102	0290  53				     push bx
1  1103	0291  50				     push ax
1  1104	0292  8A 36 09F4r		     mov dh,linha_tela	     ; linha
1  1105	0296  8A 16 09F5r		     mov dl,coluna_tela	     ; coluna
1  1106	029A  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1107				     zero - valor em bh
1  1108	029C  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1109	029E  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1110	02A0  58				     pop ax
1  1111	02A1  5B				     pop bx
1  1112	02A2  59				     pop cx
1  1113	02A3  5A				     pop dx
   1114							     escreve pos_campo1	     ; escreve o selecionador na nova posição do    +
   1115				     cursor
1  1116	02A4  52				     push dx
1  1117	02A5  50				     push ax
1  1118	02A6  BA 0898r				     lea dx,pos_campo1
1  1119	02A9  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  1120	02AB  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  1121	02AD  58				     pop ax
1  1122	02AE  5A				     pop dx
   1123	02AF  80 06 09F5r 02				     add coluna_tela,2
   1124							     posiciona linha_tela,coluna_tela
1  1125	02B4  52				     push dx
1  1126	02B5  51				     push cx
1  1127	02B6  53				     push bx
1  1128	02B7  50				     push ax
1  1129	02B8  8A 36 09F4r		     mov dh,linha_tela	     ; linha
1  1130	02BC  8A 16 09F5r		     mov dl,coluna_tela	     ; coluna
1  1131	02C0  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1132				     zero - valor em bh
1  1133	02C2  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1134	02C4  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1135	02C6  58				     pop ax
1  1136	02C7  5B				     pop bx
1  1137	02C8  59				     pop cx
1  1138	02C9  5A				     pop dx
   1139							     escreve pos_campo2
1  1140	02CA  52				     push dx
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 21
minado.ASM



1  1141	02CB  50				     push ax
1  1142	02CC  BA 089Ar				     lea dx,pos_campo2
1  1143	02CF  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  1144	02D1  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  1145	02D3  58				     pop ax
1  1146	02D4  5A				     pop dx
   1147	02D5  FE 0E 09F5r				     dec coluna_tela
   1148							     posiciona linha_tela,coluna_tela
1  1149	02D9  52				     push dx
1  1150	02DA  51				     push cx
1  1151	02DB  53				     push bx
1  1152	02DC  50				     push ax
1  1153	02DD  8A 36 09F4r		     mov dh,linha_tela	     ; linha
1  1154	02E1  8A 16 09F5r		     mov dl,coluna_tela	     ; coluna
1  1155	02E5  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1156				     zero - valor em bh
1  1157	02E7  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1158	02E9  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1159	02EB  58				     pop ax
1  1160	02EC  5B				     pop bx
1  1161	02ED  59				     pop cx
1  1162	02EE  5A				     pop dx
   1163	02EF					     volta2:
   1164	02EF  EB 90					     jmp volta1
   1165	02F1					     testa_right:
   1166	02F1  80 3E 09FAr 4D				     cmp scancode,RIGHT
   1167	02F6  75 F7					     jne volta2			     ; vai para	'volta'	para depois ir para +
   1168				     'denovo'
   1169	02F8  E8 0B23					     call trata_right
   1170
   1171							     posiciona linha_tela,coluna_tela
1  1172	02FB  52				     push dx
1  1173	02FC  51				     push cx
1  1174	02FD  53				     push bx
1  1175	02FE  50				     push ax
1  1176	02FF  8A 36 09F4r		     mov dh,linha_tela	     ; linha
1  1177	0303  8A 16 09F5r		     mov dl,coluna_tela	     ; coluna
1  1178	0307  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1179				     zero - valor em bh
1  1180	0309  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1181	030B  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1182	030D  58				     pop ax
1  1183	030E  5B				     pop bx
1  1184	030F  59				     pop cx
1  1185	0310  5A				     pop dx
   1186							     escreve pos_campo1	     ; escreve o selecionador na nova posição do    +
   1187				     cursor
1  1188	0311  52				     push dx
1  1189	0312  50				     push ax
1  1190	0313  BA 0898r				     lea dx,pos_campo1
1  1191	0316  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  1192	0318  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  1193	031A  58				     pop ax
1  1194	031B  5A				     pop dx
   1195	031C  80 06 09F5r 02				     add coluna_tela,2
   1196							     posiciona linha_tela,coluna_tela
1  1197	0321  52				     push dx
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 22
minado.ASM



1  1198	0322  51				     push cx
1  1199	0323  53				     push bx
1  1200	0324  50				     push ax
1  1201	0325  8A 36 09F4r		     mov dh,linha_tela	     ; linha
1  1202	0329  8A 16 09F5r		     mov dl,coluna_tela	     ; coluna
1  1203	032D  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1204				     zero - valor em bh
1  1205	032F  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1206	0331  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1207	0333  58				     pop ax
1  1208	0334  5B				     pop bx
1  1209	0335  59				     pop cx
1  1210	0336  5A				     pop dx
   1211							     escreve pos_campo2
1  1212	0337  52				     push dx
1  1213	0338  50				     push ax
1  1214	0339  BA 089Ar				     lea dx,pos_campo2
1  1215	033C  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  1216	033E  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  1217	0340  58				     pop ax
1  1218	0341  5A				     pop dx
   1219	0342  FE 0E 09F5r				     dec coluna_tela
   1220							     posiciona linha_tela,coluna_tela
1  1221	0346  52				     push dx
1  1222	0347  51				     push cx
1  1223	0348  53				     push bx
1  1224	0349  50				     push ax
1  1225	034A  8A 36 09F4r		     mov dh,linha_tela	     ; linha
1  1226	034E  8A 16 09F5r		     mov dl,coluna_tela	     ; coluna
1  1227	0352  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1228				     zero - valor em bh
1  1229	0354  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1230	0356  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1231	0358  58				     pop ax
1  1232	0359  5B				     pop bx
1  1233	035A  59				     pop cx
1  1234	035B  5A				     pop dx
   1235	035C					     volta3:
   1236	035C  EB 91					     jmp volta2
   1237	035E				     testa_esc:
   1238	035E  80 3E 09F9r 1B			     cmp asciicode,EXIT		     ; cmp faz asciicode - EXIT
   1239	0363  75 F7				     jne volta3				     ; vai para	volta para depois cair no   +
   1240				     'jmp denovo'
   1241						     ; escreve mensagens de que	saída
   1242	0365  E8 0BEC				     call imprimir_conteudo_matriz
   1243	0368  E9 021B				     jmp near ptr fim_programa2
   1244	036B				     fim_programa:
   1245						     posiciona 22,47
1  1246	036B  52				     push dx
1  1247	036C  51				     push cx
1  1248	036D  53				     push bx
1  1249	036E  50				     push ax
1  1250	036F  B6 16			     mov dh,22	     ; linha
1  1251	0371  B2 2F			     mov dl,47	     ; coluna
1  1252	0373  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1253				     zero - valor em bh
1  1254	0375  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 23
minado.ASM



1  1255	0377  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1256	0379  58				     pop ax
1  1257	037A  5B				     pop bx
1  1258	037B  59				     pop cx
1  1259	037C  5A				     pop dx
   1260						     escreve msg_limpa_linha
1  1261	037D  52				     push dx
1  1262	037E  50				     push ax
1  1263	037F  BA 08A0r				     lea dx,msg_limpa_linha
1  1264	0382  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  1265	0384  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  1266	0386  58				     pop ax
1  1267	0387  5A				     pop dx
   1268						     posiciona 23,47
1  1269	0388  52				     push dx
1  1270	0389  51				     push cx
1  1271	038A  53				     push bx
1  1272	038B  50				     push ax
1  1273	038C  B6 17			     mov dh,23	     ; linha
1  1274	038E  B2 2F			     mov dl,47	     ; coluna
1  1275	0390  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1276				     zero - valor em bh
1  1277	0392  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1278	0394  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1279	0396  58				     pop ax
1  1280	0397  5B				     pop bx
1  1281	0398  59				     pop cx
1  1282	0399  5A				     pop dx
   1283						     escreve msg_limpa_linha
1  1284	039A  52				     push dx
1  1285	039B  50				     push ax
1  1286	039C  BA 08A0r				     lea dx,msg_limpa_linha
1  1287	039F  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  1288	03A1  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  1289	03A3  58				     pop ax
1  1290	03A4  5A				     pop dx
   1291	03A5  80 3E 0A04r 01			     cmp voce_ganhou,1
   1292	03AA  74 3D				     je	usuario_ganhou
   1293						     posiciona 22,47
1  1294	03AC  52				     push dx
1  1295	03AD  51				     push cx
1  1296	03AE  53				     push bx
1  1297	03AF  50				     push ax
1  1298	03B0  B6 16			     mov dh,22	     ; linha
1  1299	03B2  B2 2F			     mov dl,47	     ; coluna
1  1300	03B4  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1301				     zero - valor em bh
1  1302	03B6  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1303	03B8  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1304	03BA  58				     pop ax
1  1305	03BB  5B				     pop bx
1  1306	03BC  59				     pop cx
1  1307	03BD  5A				     pop dx
   1308						     escreve msg_explodiu
1  1309	03BE  52				     push dx
1  1310	03BF  50				     push ax
1  1311	03C0  BA 0951r				     lea dx,msg_explodiu
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 24
minado.ASM



1  1312	03C3  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  1313	03C5  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  1314	03C7  58				     pop ax
1  1315	03C8  5A				     pop dx
   1316						     posiciona 23,47
1  1317	03C9  52				     push dx
1  1318	03CA  51				     push cx
1  1319	03CB  53				     push bx
1  1320	03CC  50				     push ax
1  1321	03CD  B6 17			     mov dh,23	     ; linha
1  1322	03CF  B2 2F			     mov dl,47	     ; coluna
1  1323	03D1  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1324				     zero - valor em bh
1  1325	03D3  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1326	03D5  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1327	03D7  58				     pop ax
1  1328	03D8  5B				     pop bx
1  1329	03D9  59				     pop cx
1  1330	03DA  5A				     pop dx
   1331						     escreve msg_aperta_enter
1  1332	03DB  52				     push dx
1  1333	03DC  50				     push ax
1  1334	03DD  BA 0984r				     lea dx,msg_aperta_enter
1  1335	03E0  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  1336	03E2  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  1337	03E4  58				     pop ax
1  1338	03E5  5A				     pop dx
   1339	03E6  EB 3B 90				     jmp vai_espera_tecla
   1340	03E9				     usuario_ganhou:
   1341						     posiciona 22,47
1  1342	03E9  52				     push dx
1  1343	03EA  51				     push cx
1  1344	03EB  53				     push bx
1  1345	03EC  50				     push ax
1  1346	03ED  B6 16			     mov dh,22	     ; linha
1  1347	03EF  B2 2F			     mov dl,47	     ; coluna
1  1348	03F1  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1349				     zero - valor em bh
1  1350	03F3  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1351	03F5  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1352	03F7  58				     pop ax
1  1353	03F8  5B				     pop bx
1  1354	03F9  59				     pop cx
1  1355	03FA  5A				     pop dx
   1356						     escreve msg_ganhou
1  1357	03FB  52				     push dx
1  1358	03FC  50				     push ax
1  1359	03FD  BA 096Cr				     lea dx,msg_ganhou
1  1360	0400  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  1361	0402  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  1362	0404  58				     pop ax
1  1363	0405  5A				     pop dx
   1364						     posiciona 23,47
1  1365	0406  52				     push dx
1  1366	0407  51				     push cx
1  1367	0408  53				     push bx
1  1368	0409  50				     push ax
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 25
minado.ASM



1  1369	040A  B6 17			     mov dh,23	     ; linha
1  1370	040C  B2 2F			     mov dl,47	     ; coluna
1  1371	040E  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1372				     zero - valor em bh
1  1373	0410  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1374	0412  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1375	0414  58				     pop ax
1  1376	0415  5B				     pop bx
1  1377	0416  59				     pop cx
1  1378	0417  5A				     pop dx
   1379						     escreve msg_aperta_enter
1  1380	0418  52				     push dx
1  1381	0419  50				     push ax
1  1382	041A  BA 0984r				     lea dx,msg_aperta_enter
1  1383	041D  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  1384	041F  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  1385	0421  58				     pop ax
1  1386	0422  5A				     pop dx
   1387	0423				     vai_espera_tecla:
   1388	0423  E8 0B2E				     call imprimir_conteudo_matriz
   1389						     posiciona 4,5
1  1390	0426  52				     push dx
1  1391	0427  51				     push cx
1  1392	0428  53				     push bx
1  1393	0429  50				     push ax
1  1394	042A  B6 04			     mov dh,4	     ; linha
1  1395	042C  B2 05			     mov dl,5	     ; coluna
1  1396	042E  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1397				     zero - valor em bh
1  1398	0430  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1399	0432  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1400	0434  58				     pop ax
1  1401	0435  5B				     pop bx
1  1402	0436  59				     pop cx
1  1403	0437  5A				     pop dx
   1404	0438  E8 01E4				     call espera_tecla
   1405	043B				     pega_tecla_denovo:
   1406						     posiciona 22,47
1  1407	043B  52				     push dx
1  1408	043C  51				     push cx
1  1409	043D  53				     push bx
1  1410	043E  50				     push ax
1  1411	043F  B6 16			     mov dh,22	     ; linha
1  1412	0441  B2 2F			     mov dl,47	     ; coluna
1  1413	0443  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1414				     zero - valor em bh
1  1415	0445  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1416	0447  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1417	0449  58				     pop ax
1  1418	044A  5B				     pop bx
1  1419	044B  59				     pop cx
1  1420	044C  5A				     pop dx
   1421						     escreve msg_limpa_linha
1  1422	044D  52				     push dx
1  1423	044E  50				     push ax
1  1424	044F  BA 08A0r				     lea dx,msg_limpa_linha
1  1425	0452  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 26
minado.ASM



1  1426	0454  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  1427	0456  58				     pop ax
1  1428	0457  5A				     pop dx
   1429						     posiciona 22,47
1  1430	0458  52				     push dx
1  1431	0459  51				     push cx
1  1432	045A  53				     push bx
1  1433	045B  50				     push ax
1  1434	045C  B6 16			     mov dh,22	     ; linha
1  1435	045E  B2 2F			     mov dl,47	     ; coluna
1  1436	0460  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1437				     zero - valor em bh
1  1438	0462  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1439	0464  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1440	0466  58				     pop ax
1  1441	0467  5B				     pop bx
1  1442	0468  59				     pop cx
1  1443	0469  5A				     pop dx
   1444						     escreve msg_continuar
1  1445	046A  52				     push dx
1  1446	046B  50				     push ax
1  1447	046C  BA 09B9r				     lea dx,msg_continuar
1  1448	046F  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  1449	0471  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  1450	0473  58				     pop ax
1  1451	0474  5A				     pop dx
   1452						     posiciona 23,47
1  1453	0475  52				     push dx
1  1454	0476  51				     push cx
1  1455	0477  53				     push bx
1  1456	0478  50				     push ax
1  1457	0479  B6 17			     mov dh,23	     ; linha
1  1458	047B  B2 2F			     mov dl,47	     ; coluna
1  1459	047D  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1460				     zero - valor em bh
1  1461	047F  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1462	0481  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1463	0483  58				     pop ax
1  1464	0484  5B				     pop bx
1  1465	0485  59				     pop cx
1  1466	0486  5A				     pop dx
   1467						     escreve msg_limpa_linha
1  1468	0487  52				     push dx
1  1469	0488  50				     push ax
1  1470	0489  BA 08A0r				     lea dx,msg_limpa_linha
1  1471	048C  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  1472	048E  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  1473	0490  58				     pop ax
1  1474	0491  5A				     pop dx
   1475						     posiciona 23,47
1  1476	0492  52				     push dx
1  1477	0493  51				     push cx
1  1478	0494  53				     push bx
1  1479	0495  50				     push ax
1  1480	0496  B6 17			     mov dh,23	     ; linha
1  1481	0498  B2 2F			     mov dl,47	     ; coluna
1  1482	049A  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 27
minado.ASM



   1483				     zero - valor em bh
1  1484	049C  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1485	049E  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1486	04A0  58				     pop ax
1  1487	04A1  5B				     pop bx
1  1488	04A2  59				     pop cx
1  1489	04A3  5A				     pop dx
   1490						     escreve msg_confirmacao
1  1491	04A4  52				     push dx
1  1492	04A5  50				     push ax
1  1493	04A6  BA 09D2r				     lea dx,msg_confirmacao
1  1494	04A9  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  1495	04AB  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  1496	04AD  58				     pop ax
1  1497	04AE  5A				     pop dx
   1498						     posiciona 23,64 ; posiciona o cursor para escrever	o próximo caractere escrito
1  1499	04AF  52				     push dx
1  1500	04B0  51				     push cx
1  1501	04B1  53				     push bx
1  1502	04B2  50				     push ax
1  1503	04B3  B6 17			     mov dh,23	     ; linha
1  1504	04B5  B2 40			     mov dl,64	     ; coluna
1  1505	04B7  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1506				     zero - valor em bh
1  1507	04B9  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1508	04BB  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1509	04BD  58				     pop ax
1  1510	04BE  5B				     pop bx
1  1511	04BF  59				     pop cx
1  1512	04C0  5A				     pop dx
   1513	04C1  E8 015B				     call espera_tecla
   1514	04C4  A2 09E8r				     mov linha_ascii,al	     ; pega tecla recém	pressionada
   1515						     escreve linha_ascii ; escreve tecla pressionada
1  1516	04C7  52				     push dx
1  1517	04C8  50				     push ax
1  1518	04C9  BA 09E8r				     lea dx,linha_ascii
1  1519	04CC  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  1520	04CE  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  1521	04D0  58				     pop ax
1  1522	04D1  5A				     pop dx
   1523						     posiciona 22,47
1  1524	04D2  52				     push dx
1  1525	04D3  51				     push cx
1  1526	04D4  53				     push bx
1  1527	04D5  50				     push ax
1  1528	04D6  B6 16			     mov dh,22	     ; linha
1  1529	04D8  B2 2F			     mov dl,47	     ; coluna
1  1530	04DA  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1531				     zero - valor em bh
1  1532	04DC  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1533	04DE  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1534	04E0  58				     pop ax
1  1535	04E1  5B				     pop bx
1  1536	04E2  59				     pop cx
1  1537	04E3  5A				     pop dx
   1538						     escreve msg_limpa_linha
1  1539	04E4  52				     push dx
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 28
minado.ASM



1  1540	04E5  50				     push ax
1  1541	04E6  BA 08A0r				     lea dx,msg_limpa_linha
1  1542	04E9  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  1543	04EB  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  1544	04ED  58				     pop ax
1  1545	04EE  5A				     pop dx
   1546						     posiciona 22,47
1  1547	04EF  52				     push dx
1  1548	04F0  51				     push cx
1  1549	04F1  53				     push bx
1  1550	04F2  50				     push ax
1  1551	04F3  B6 16			     mov dh,22	     ; linha
1  1552	04F5  B2 2F			     mov dl,47	     ; coluna
1  1553	04F7  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1554				     zero - valor em bh
1  1555	04F9  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1556	04FB  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1557	04FD  58				     pop ax
1  1558	04FE  5B				     pop bx
1  1559	04FF  59				     pop cx
1  1560	0500  5A				     pop dx
   1561						     escreve msg_aperta_enter
1  1562	0501  52				     push dx
1  1563	0502  50				     push ax
1  1564	0503  BA 0984r				     lea dx,msg_aperta_enter
1  1565	0506  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  1566	0508  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  1567	050A  58				     pop ax
1  1568	050B  5A				     pop dx
   1569						     posiciona 23,64
1  1570	050C  52				     push dx
1  1571	050D  51				     push cx
1  1572	050E  53				     push bx
1  1573	050F  50				     push ax
1  1574	0510  B6 17			     mov dh,23	     ; linha
1  1575	0512  B2 40			     mov dl,64	     ; coluna
1  1576	0514  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1577				     zero - valor em bh
1  1578	0516  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1579	0518  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1580	051A  58				     pop ax
1  1581	051B  5B				     pop bx
1  1582	051C  59				     pop cx
1  1583	051D  5A				     pop dx
   1584	051E				     espera_denovo:
   1585	051E  E8 00FE				     call espera_tecla ; espera	enter ou backspace
   1586	0521  A2 09F9r				     mov asciicode,al
   1587	0524  80 3E 09F9r 0D			     cmp asciicode,SEND
   1588	0529  74 39				     je	fim_enter
   1589	052B  80 3E 09F9r 08			     cmp asciicode,BACKSPACE
   1590	0530  75 EC				     jne espera_denovo	     ; usuário ainda não apertou enter e nem backspace
   1591						     ; usuário apertou backspace
   1592						     posiciona 23,64
1  1593	0532  52				     push dx
1  1594	0533  51				     push cx
1  1595	0534  53				     push bx
1  1596	0535  50				     push ax
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 29
minado.ASM



1  1597	0536  B6 17			     mov dh,23	     ; linha
1  1598	0538  B2 40			     mov dl,64	     ; coluna
1  1599	053A  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1600				     zero - valor em bh
1  1601	053C  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1602	053E  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1603	0540  58				     pop ax
1  1604	0541  5B				     pop bx
1  1605	0542  59				     pop cx
1  1606	0543  5A				     pop dx
   1607						     escreve msg_limpa_char
1  1608	0544  52				     push dx
1  1609	0545  50				     push ax
1  1610	0546  BA 089Er				     lea dx,msg_limpa_char
1  1611	0549  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  1612	054B  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  1613	054D  58				     pop ax
1  1614	054E  5A				     pop dx
   1615						     posiciona 23,64 ; termina de executar o backspace
1  1616	054F  52				     push dx
1  1617	0550  51				     push cx
1  1618	0551  53				     push bx
1  1619	0552  50				     push ax
1  1620	0553  B6 17			     mov dh,23	     ; linha
1  1621	0555  B2 40			     mov dl,64	     ; coluna
1  1622	0557  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1623				     zero - valor em bh
1  1624	0559  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1625	055B  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1626	055D  58				     pop ax
1  1627	055E  5B				     pop bx
1  1628	055F  59				     pop cx
1  1629	0560  5A				     pop dx
   1630	0561  E9 FED7				     jmp near ptr pega_tecla_denovo ; foi dado o backspace, agora espera outra tecla
   1631	0564				     fim_enter:
   1632	0564  80 3E 09E8r 53			     cmp linha_ascii,53H
   1633	0569  74 18				     je	tudo_denovo
   1634	056B  80 3E 09E8r 73			     cmp linha_ascii,73H
   1635	0570  74 11				     je	tudo_denovo
   1636	0572  80 3E 09E8r 4E			     cmp linha_ascii,4EH
   1637	0577  74 0D				     je	fim_programa2
   1638	0579  80 3E 09E8r 6E			     cmp linha_ascii,6EH
   1639	057E  74 06				     je	fim_programa2
   1640	0580  E9 FEB8				     jmp near ptr pega_tecla_denovo
   1641	0583				     tudo_denovo:
   1642	0583  E9 FA7A				     jmp near ptr inicio
   1643						     ; pega caractere e	escreve	na tela
   1644
   1645						     ; espera enter ou backspace
   1646							     ; se for enter:
   1647								     ; vê se o caractere é S/s ou N/n
   1648									     ; se for S	volta
   1649									     ; se for N	fim
   1650									     ; qualquer	outra coisa
   1651							     ; se for backspace	exclui caractere
   1652	0586				     fim_programa2:
   1653						     posiciona 22,47
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 30
minado.ASM



1  1654	0586  52				     push dx
1  1655	0587  51				     push cx
1  1656	0588  53				     push bx
1  1657	0589  50				     push ax
1  1658	058A  B6 16			     mov dh,22	     ; linha
1  1659	058C  B2 2F			     mov dl,47	     ; coluna
1  1660	058E  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1661				     zero - valor em bh
1  1662	0590  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1663	0592  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1664	0594  58				     pop ax
1  1665	0595  5B				     pop bx
1  1666	0596  59				     pop cx
1  1667	0597  5A				     pop dx
   1668						     escreve msg_limpa_linha
1  1669	0598  52				     push dx
1  1670	0599  50				     push ax
1  1671	059A  BA 08A0r				     lea dx,msg_limpa_linha
1  1672	059D  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  1673	059F  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  1674	05A1  58				     pop ax
1  1675	05A2  5A				     pop dx
   1676						     posiciona 22,47
1  1677	05A3  52				     push dx
1  1678	05A4  51				     push cx
1  1679	05A5  53				     push bx
1  1680	05A6  50				     push ax
1  1681	05A7  B6 16			     mov dh,22	     ; linha
1  1682	05A9  B2 2F			     mov dl,47	     ; coluna
1  1683	05AB  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1684				     zero - valor em bh
1  1685	05AD  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1686	05AF  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1687	05B1  58				     pop ax
1  1688	05B2  5B				     pop bx
1  1689	05B3  59				     pop cx
1  1690	05B4  5A				     pop dx
   1691						     escreve msg_fim
1  1692	05B5  52				     push dx
1  1693	05B6  50				     push ax
1  1694	05B7  BA 091Er				     lea dx,msg_fim
1  1695	05BA  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  1696	05BC  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  1697	05BE  58				     pop ax
1  1698	05BF  5A				     pop dx
   1699						     posiciona 23,47
1  1700	05C0  52				     push dx
1  1701	05C1  51				     push cx
1  1702	05C2  53				     push bx
1  1703	05C3  50				     push ax
1  1704	05C4  B6 17			     mov dh,23	     ; linha
1  1705	05C6  B2 2F			     mov dl,47	     ; coluna
1  1706	05C8  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1707				     zero - valor em bh
1  1708	05CA  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1709	05CC  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1710	05CE  58				     pop ax
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 31
minado.ASM



1  1711	05CF  5B				     pop bx
1  1712	05D0  59				     pop cx
1  1713	05D1  5A				     pop dx
   1714						     escreve msg_limpa_linha
1  1715	05D2  52				     push dx
1  1716	05D3  50				     push ax
1  1717	05D4  BA 08A0r				     lea dx,msg_limpa_linha
1  1718	05D7  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  1719	05D9  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  1720	05DB  58				     pop ax
1  1721	05DC  5A				     pop dx
   1722						     posiciona 23,47
1  1723	05DD  52				     push dx
1  1724	05DE  51				     push cx
1  1725	05DF  53				     push bx
1  1726	05E0  50				     push ax
1  1727	05E1  B6 17			     mov dh,23	     ; linha
1  1728	05E3  B2 2F			     mov dl,47	     ; coluna
1  1729	05E5  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1730				     zero - valor em bh
1  1731	05E7  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1732	05E9  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1733	05EB  58				     pop ax
1  1734	05EC  5B				     pop bx
1  1735	05ED  59				     pop cx
1  1736	05EE  5A				     pop dx
   1737						     escreve msg_fim_thanks
1  1738	05EF  52				     push dx
1  1739	05F0  50				     push ax
1  1740	05F1  BA 093Dr				     lea dx,msg_fim_thanks
1  1741	05F4  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  1742	05F6  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  1743	05F8  58				     pop ax
1  1744	05F9  5A				     pop dx
   1745	05FA  B8 4C00				     mov ax,4c00h	    ; funcao retornar ao DOS no	AH
   1746	05FD  CD 21			     int 21h		    ; chamada do DOS
   1747
   1748				     ;===============================================================================================
   1749				     ===========================
   1750				     ;==					    Subrotinas | Procedures			    +
   1751				     ==
   1752				     ;===============================================================================================
   1753				     ===========================
   1754
   1755	05FF			     rand proc
   1756	05FF  50			     push   ax
   1757	0600  53			     push   bx
   1758	0601  8B 1E 0A83r		     mov    bx,_@RNDptr
   1759	0605  8A 17			     mov    dl,[bx]
   1760	0607  43			     inc    bx
   1761	0608  FF 0E 0A81r		     dec    _@RNDcnt
   1762	060C  75 0A			     jnz    naozero
   1763	060E  B8 007C			     mov    ax,_@RNDmax
   1764	0611  A3 0A81r			     mov    _@RNDcnt,ax
   1765	0614  8B 1E 0A85r		     mov    bx,_@RNDadr
   1766	0618				     naozero:
   1767	0618  89 1E 0A83r			     mov    _@RNDptr,bx
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 32
minado.ASM



   1768	061C  5B			     pop    bx
   1769	061D  58			     pop    ax
   1770	061E  C3			     ret
   1771	061F			     rand endp
   1772
   1773				     ;-----------------------------------------------------------------------------------------------
   1774				     --------------------------
   1775				     ;-----------------------------------------------------------------------------------------------
   1776				     --------------------------
   1777
   1778	061F			     espera_tecla proc
   1779	061F  B4 00			     mov ah,0		    ; funcao esperar tecla no AH
   1780	0621  CD 16			     int 16h		    ; chamada do DOS
   1781	0623  C3			     ret
   1782	0624			     espera_tecla endp
   1783
   1784				     ;-----------------------------------------------------------------------------------------------
   1785				     --------------------------
   1786				     ;-----------------------------------------------------------------------------------------------
   1787				     --------------------------
   1788
   1789	0624			     trata_t proc
   1790						     ; ve se todas as posições marcadas	tem mina, se alguma não	tiver, então BUMMM, +
   1791				     termina o jogo
   1792	0624  BF 0064r				     lea di,escolha_marcadores
   1793	0627  BE 0000r				     lea si,conteudo_matriz
   1794	062A  C6 06 09FEr 64			     mov cont_posicoes,100
   1795	062F  C6 06 0A04r 01			     mov voce_ganhou,1
   1796	0634				     trata_t_continua:
   1797						     ; procura
   1798	0634  80 3D 4D				     cmp byte ptr [di],4DH
   1799	0637  75 0D				     jne decrementa_cont_posicoes
   1800	0639  80 3C FF				     cmp byte ptr [si],-1
   1801	063C  74 08				     je	decrementa_cont_posicoes
   1802
   1803						     ; posição marcada e sem mina, ou seja, pelo menos uma mina	do campo ira explodir
   1804	063E  C6 06 0A04r 00			     mov voce_ganhou,0 ; quer dizer que	o usuário perdeu
   1805	0643  EB 0E 90				     jmp trata_t_fim
   1806
   1807	0646				     decrementa_cont_posicoes:
   1808	0646  47				     inc di
   1809	0647  46				     inc si
   1810	0648  FE 0E 09FEr			     dec cont_posicoes
   1811	064C  80 3E 09FEr 00			     cmp cont_posicoes,0
   1812	0651  75 E1				     jne trata_t_continua
   1813	0653				     trata_t_fim:
   1814	0653  C3				     ret
   1815	0654			     trata_t endp
   1816
   1817				     ;-----------------------------------------------------------------------------------------------
   1818				     --------------------------
   1819				     ;-----------------------------------------------------------------------------------------------
   1820				     --------------------------
   1821
   1822	0654			     trata_enter proc
   1823	0654  50				     push ax
   1824	0655  53				     push bx
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 33
minado.ASM



   1825	0656  51				     push cx
   1826	0657  52				     push dx
   1827	0658  BF 0064r				     lea di,escolha_marcadores ; carrega o endereço do array escolha_marcadores	em di
   1828						     pega_coordenadas ;	pega as	coordenas de linha e coluna da matriz
1  1829	065B  50				     push ax
1  1830	065C  52				     push dx
1  1831	065D  53				     push bx
1  1832	065E  8A 16 09F4r			     mov dl,linha_tela
1  1833	0662  88 16 09F6r			     mov linha_matriz,dl
1  1834	0666  80 2E 09F6r 02			     sub linha_matriz,2
1  1835	066B  D0 2E 09F6r			     shr linha_matriz,1	; divide linha_matriz por 2
1  1836	066F  8A 16 09F5r			     mov dl,coluna_tela
1  1837	0673  88 16 09F7r			     mov coluna_matriz,dl
1  1838	0677  FE 0E 09F7r			     dec coluna_matriz
1  1839	067B  D0 2E 09F7r D0 2E	  +		     shr coluna_matriz,2 ; divide linha_matriz por 2 (faz dois shifts)
   1840	      09F7r
1  1841	0683  5B				     pop bx
1  1842	0684  5A				     pop dx
1  1843	0685  58				     pop ax
   1844	0686  FE 0E 09F6r			     dec linha_matriz
   1845	068A  FE 0E 09F7r			     dec coluna_matriz
   1846	068E  A0 09F6r				     mov al,linha_matriz
   1847	0691  C6 06 09F8r 0A			     mov deslocamento,10
   1848	0696  F6 26 09F8r			     mul deslocamento		     ; realiza o produto entre al e deslocamento,   +
   1849				     resultado em ax
   1850	069A  02 06 09F7r			     add al,coluna_matriz    ; como o resultado	da multiplicação nunca vai	    +
   1851				     ultrapassar 99, então o resultado estará na parte baixa do	ax, ou seja, al
   1852	069E  A2 09F8r				     mov deslocamento,al
   1853	06A1  A0 09F8r				     mov al,deslocamento	     ; al tem a	posição	no array escolha_marcadores +
   1854				     correspondente às coordenadas da matriz
   1855	06A4  98				     cbw				     ; converte	al para	ax
   1856	06A5  03 F8				     add di,ax				     ; di está apontando agora para a	    +
   1857				     posição correta do	vetor
   1858	06A7  80 3E 09FBr 41			     cmp selecao_AM,41H	     ; 41H -> A
   1859	06AC  75 03				     jne quero_testa_M
   1860	06AE  EB 06 90				     jmp continua_trata_enter1
   1861	06B1				     quero_testa_M:
   1862	06B1  E9 00A6 90 90			     jmp far ptr testa_M
   1863	06B6				     continua_trata_enter1:
   1864	06B6  80 3D 41				     cmp byte ptr [di],41H
   1865	06B9  74 03				     je	quero_ir_pro_fim_2
   1866	06BB  EB 06 90				     jmp continua_trata_enter2
   1867	06BE				     quero_ir_pro_fim_2:
   1868	06BE  E9 0090 90 90			     jmp far ptr quero_ir_pro_fim
   1869	06C3				     continua_trata_enter2:
   1870	06C3  C6 05 41				     mov byte ptr [di],41H ; coloca o marcador A na posição que	o cursor aponta, ou +
   1871				     seja, abre	a posição
   1872
   1873						     ; abre a posicao se não tiver
   1874	06C6  80 3D 4D				     cmp byte ptr [di],4DH
   1875	06C9  75 0B				     jne continua_trata_enter3	     ; ve se a posição escolhida está marcada. Se   +
   1876				     estiver incrementa	mnas_a_marcar e	atualiza a tela
   1877	06CB  FE 06 0A00r			     inc minas_a_marcar
   1878	06CF  FE 0E 09FFr			     dec minas_marcadas
   1879	06D3  E8 024D				     call escreve_marcados
   1880	06D6				     continua_trata_enter3:
   1881	06D6  BF 0000r				     lea di,conteudo_matriz
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 34
minado.ASM



   1882	06D9  A0 09F8r				     mov al,deslocamento
   1883	06DC  98				     cbw
   1884	06DD  03 F8				     add di,ax ; di está apontando pro conteúdo	da posiçao da matriz
   1885	06DF  80 3D FF				     cmp byte ptr [di],-1
   1886	06E2  75 42				     jne nao_tem_mina	     ; se entrar nesse jmp quer	dizer que a posição aberta  +
   1887				     não tem mina, logo	devemos	abrí-la
   1888	06E4				     tem_mina: ; se não	entrar no jmp cai aqui,	ou seja, tem mina, logo	termina	o jogo
   1889						     posiciona 22,47
1  1890	06E4  52				     push dx
1  1891	06E5  51				     push cx
1  1892	06E6  53				     push bx
1  1893	06E7  50				     push ax
1  1894	06E8  B6 16			     mov dh,22	     ; linha
1  1895	06EA  B2 2F			     mov dl,47	     ; coluna
1  1896	06EC  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1897				     zero - valor em bh
1  1898	06EE  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1899	06F0  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1900	06F2  58				     pop ax
1  1901	06F3  5B				     pop bx
1  1902	06F4  59				     pop cx
1  1903	06F5  5A				     pop dx
   1904						     escreve msg_limpa_linha
1  1905	06F6  52				     push dx
1  1906	06F7  50				     push ax
1  1907	06F8  BA 08A0r				     lea dx,msg_limpa_linha
1  1908	06FB  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  1909	06FD  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  1910	06FF  58				     pop ax
1  1911	0700  5A				     pop dx
   1912						     posiciona 22,47
1  1913	0701  52				     push dx
1  1914	0702  51				     push cx
1  1915	0703  53				     push bx
1  1916	0704  50				     push ax
1  1917	0705  B6 16			     mov dh,22	     ; linha
1  1918	0707  B2 2F			     mov dl,47	     ; coluna
1  1919	0709  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1920				     zero - valor em bh
1  1921	070B  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1922	070D  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1923	070F  58				     pop ax
1  1924	0710  5B				     pop bx
1  1925	0711  59				     pop cx
1  1926	0712  5A				     pop dx
   1927						     escreve msg_explodiu
1  1928	0713  52				     push dx
1  1929	0714  50				     push ax
1  1930	0715  BA 0951r				     lea dx,msg_explodiu
1  1931	0718  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  1932	071A  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  1933	071C  58				     pop ax
1  1934	071D  5A				     pop dx
   1935	071E  C6 06 0A03r 01			     mov explodiu,1
   1936	0723  EB 2C 90				     jmp quero_ir_pro_fim
   1937	0726				     nao_tem_mina:
   1938	0726  8A 05				     mov al,byte ptr [di]
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 35
minado.ASM



   1939	0728  A2 09F2r				     mov conteudo,al
   1940	072B  80 0E 09F2r 30			     or	conteudo,00110000B ; converte conteúdo para
   1941						     posiciona linha_tela,coluna_tela
1  1942	0730  52				     push dx
1  1943	0731  51				     push cx
1  1944	0732  53				     push bx
1  1945	0733  50				     push ax
1  1946	0734  8A 36 09F4r		     mov dh,linha_tela	     ; linha
1  1947	0738  8A 16 09F5r		     mov dl,coluna_tela	     ; coluna
1  1948	073C  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1949				     zero - valor em bh
1  1950	073E  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1951	0740  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1952	0742  58				     pop ax
1  1953	0743  5B				     pop bx
1  1954	0744  59				     pop cx
1  1955	0745  5A				     pop dx
   1956						     escreve conteudo
1  1957	0746  52				     push dx
1  1958	0747  50				     push ax
1  1959	0748  BA 09F2r				     lea dx,conteudo
1  1960	074B  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  1961	074D  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  1962	074F  58				     pop ax
1  1963	0750  5A				     pop dx
   1964	0751				     quero_ir_pro_fim:
   1965	0751  E9 01CA				     jmp trata_enter_fim
   1966
   1967
   1968	0754				     quero_ir_pra_M:
   1969	0754  E9 00C5				     jmp ja_tem_M
   1970	0757				     quero_ir_nao_pode_marcar:
   1971	0757  E9 0150				     jmp nao_pode_marcar
   1972	075A				     testa_M:
   1973						     ; se não tem A tem	M
   1974	075A  80 3D 4D				     cmp byte ptr [di],4DH   ; vê se a posição já tem M. Se tiver tira.	Se não tiver+
   1975				     coloca
   1976	075D  74 F5				     je	quero_ir_pra_M	     ; ja tem M, então deve tirar o M
   1977						     ; posicao não tem M, logo devemos ver se é	possível marcar	a posição, ou seja, +
   1978				     se	já foi atingida	as 15 marcações	de minas
   1979	075F  A0 0A01r				     mov al,minas_totais
   1980	0762  38 06 09FFr			     cmp minas_marcadas,al
   1981	0766  74 EF				     je	quero_ir_nao_pode_marcar
   1982						     ; entrou aqui: pode arcar a mina
   1983	0768  C6 05 4D				     mov byte ptr [di],4DH
   1984	076B  FE 0E 0A00r			     dec minas_a_marcar
   1985	076F  FE 06 09FFr			     inc minas_marcadas
   1986	0773  E8 01AD				     call escreve_marcados
   1987						     posiciona linha_tela,coluna_tela
1  1988	0776  52				     push dx
1  1989	0777  51				     push cx
1  1990	0778  53				     push bx
1  1991	0779  50				     push ax
1  1992	077A  8A 36 09F4r		     mov dh,linha_tela	     ; linha
1  1993	077E  8A 16 09F5r		     mov dl,coluna_tela	     ; coluna
1  1994	0782  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   1995				     zero - valor em bh
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 36
minado.ASM



1  1996	0784  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  1997	0786  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  1998	0788  58				     pop ax
1  1999	0789  5B				     pop bx
1  2000	078A  59				     pop cx
1  2001	078B  5A				     pop dx
   2002						     escreve opcao_marcar
1  2003	078C  52				     push dx
1  2004	078D  50				     push ax
1  2005	078E  BA 09E4r				     lea dx,opcao_marcar
1  2006	0791  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  2007	0793  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  2008	0795  58				     pop ax
1  2009	0796  5A				     pop dx
   2010						     posiciona 22,47
1  2011	0797  52				     push dx
1  2012	0798  51				     push cx
1  2013	0799  53				     push bx
1  2014	079A  50				     push ax
1  2015	079B  B6 16			     mov dh,22	     ; linha
1  2016	079D  B2 2F			     mov dl,47	     ; coluna
1  2017	079F  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   2018				     zero - valor em bh
1  2019	07A1  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  2020	07A3  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  2021	07A5  58				     pop ax
1  2022	07A6  5B				     pop bx
1  2023	07A7  59				     pop cx
1  2024	07A8  5A				     pop dx
   2025						     escreve msg_limpa_linha
1  2026	07A9  52				     push dx
1  2027	07AA  50				     push ax
1  2028	07AB  BA 08A0r				     lea dx,msg_limpa_linha
1  2029	07AE  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  2030	07B0  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  2031	07B2  58				     pop ax
1  2032	07B3  5A				     pop dx
   2033						     posiciona 22,47
1  2034	07B4  52				     push dx
1  2035	07B5  51				     push cx
1  2036	07B6  53				     push bx
1  2037	07B7  50				     push ax
1  2038	07B8  B6 16			     mov dh,22	     ; linha
1  2039	07BA  B2 2F			     mov dl,47	     ; coluna
1  2040	07BC  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   2041				     zero - valor em bh
1  2042	07BE  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  2043	07C0  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  2044	07C2  58				     pop ax
1  2045	07C3  5B				     pop bx
1  2046	07C4  59				     pop cx
1  2047	07C5  5A				     pop dx
   2048						     escreve msg_posicao_marcada
1  2049	07C6  52				     push dx
1  2050	07C7  50				     push ax
1  2051	07C8  BA 08C2r				     lea dx,msg_posicao_marcada
1  2052	07CB  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 37
minado.ASM



1  2053	07CD  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  2054	07CF  58				     pop ax
1  2055	07D0  5A				     pop dx
   2056	07D1  A0 0A01r				     mov al,minas_totais
   2057	07D4  38 06 09FFr			     cmp minas_marcadas,al
   2058	07D8  75 3F				     jne trata_enter_terminar
   2059	07DA  C6 06 0A02r 01			     mov pode_terminar,1
   2060						     posiciona 23,47
1  2061	07DF  52				     push dx
1  2062	07E0  51				     push cx
1  2063	07E1  53				     push bx
1  2064	07E2  50				     push ax
1  2065	07E3  B6 17			     mov dh,23	     ; linha
1  2066	07E5  B2 2F			     mov dl,47	     ; coluna
1  2067	07E7  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   2068				     zero - valor em bh
1  2069	07E9  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  2070	07EB  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  2071	07ED  58				     pop ax
1  2072	07EE  5B				     pop bx
1  2073	07EF  59				     pop cx
1  2074	07F0  5A				     pop dx
   2075						     escreve msg_limpa_linha
1  2076	07F1  52				     push dx
1  2077	07F2  50				     push ax
1  2078	07F3  BA 08A0r				     lea dx,msg_limpa_linha
1  2079	07F6  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  2080	07F8  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  2081	07FA  58				     pop ax
1  2082	07FB  5A				     pop dx
   2083						     posiciona 23,47
1  2084	07FC  52				     push dx
1  2085	07FD  51				     push cx
1  2086	07FE  53				     push bx
1  2087	07FF  50				     push ax
1  2088	0800  B6 17			     mov dh,23	     ; linha
1  2089	0802  B2 2F			     mov dl,47	     ; coluna
1  2090	0804  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   2091				     zero - valor em bh
1  2092	0806  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  2093	0808  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  2094	080A  58				     pop ax
1  2095	080B  5B				     pop bx
1  2096	080C  59				     pop cx
1  2097	080D  5A				     pop dx
   2098						     escreve msg_t_para_terminar
1  2099	080E  52				     push dx
1  2100	080F  50				     push ax
1  2101	0810  BA 09A1r				     lea dx,msg_t_para_terminar
1  2102	0813  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  2103	0815  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  2104	0817  58				     pop ax
1  2105	0818  5A				     pop dx
   2106	0819				     trata_enter_terminar:
   2107	0819  E9 0102				     jmp trata_enter_fim
   2108	081C				     ja_tem_M:
   2109	081C  C6 05 00				     mov byte ptr [di],0	     ; como ja tem M, e	a operação é de	salvar M,   +
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 38
minado.ASM



   2110				     então tira	o M com	o valor	zero
   2111	081F  FE 06 0A00r			     inc minas_a_marcar
   2112	0823  FE 0E 09FFr			     dec minas_marcadas
   2113	0827  C6 06 0A02r 00			     mov pode_terminar,0
   2114	082C  E8 00F4				     call escreve_marcados   ; escreve os novos	valores	de minas marcadas e não	    +
   2115				     marcadas na tela (canto superior direito)
   2116						     posiciona linha_tela,coluna_tela
1  2117	082F  52				     push dx
1  2118	0830  51				     push cx
1  2119	0831  53				     push bx
1  2120	0832  50				     push ax
1  2121	0833  8A 36 09F4r		     mov dh,linha_tela	     ; linha
1  2122	0837  8A 16 09F5r		     mov dl,coluna_tela	     ; coluna
1  2123	083B  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   2124				     zero - valor em bh
1  2125	083D  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  2126	083F  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  2127	0841  58				     pop ax
1  2128	0842  5B				     pop bx
1  2129	0843  59				     pop cx
1  2130	0844  5A				     pop dx
   2131						     escreve pos_campo_vazio
1  2132	0845  52				     push dx
1  2133	0846  50				     push ax
1  2134	0847  BA 089Cr				     lea dx,pos_campo_vazio
1  2135	084A  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  2136	084C  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  2137	084E  58				     pop ax
1  2138	084F  5A				     pop dx
   2139						     posiciona 22,47
1  2140	0850  52				     push dx
1  2141	0851  51				     push cx
1  2142	0852  53				     push bx
1  2143	0853  50				     push ax
1  2144	0854  B6 16			     mov dh,22	     ; linha
1  2145	0856  B2 2F			     mov dl,47	     ; coluna
1  2146	0858  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   2147				     zero - valor em bh
1  2148	085A  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  2149	085C  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  2150	085E  58				     pop ax
1  2151	085F  5B				     pop bx
1  2152	0860  59				     pop cx
1  2153	0861  5A				     pop dx
   2154						     escreve msg_limpa_linha
1  2155	0862  52				     push dx
1  2156	0863  50				     push ax
1  2157	0864  BA 08A0r				     lea dx,msg_limpa_linha
1  2158	0867  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  2159	0869  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  2160	086B  58				     pop ax
1  2161	086C  5A				     pop dx
   2162						     posiciona 22,47
1  2163	086D  52				     push dx
1  2164	086E  51				     push cx
1  2165	086F  53				     push bx
1  2166	0870  50				     push ax
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 39
minado.ASM



1  2167	0871  B6 16			     mov dh,22	     ; linha
1  2168	0873  B2 2F			     mov dl,47	     ; coluna
1  2169	0875  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   2170				     zero - valor em bh
1  2171	0877  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  2172	0879  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  2173	087B  58				     pop ax
1  2174	087C  5B				     pop bx
1  2175	087D  59				     pop cx
1  2176	087E  5A				     pop dx
   2177						     escreve msg_posicao_desmarcada
1  2178	087F  52				     push dx
1  2179	0880  50				     push ax
1  2180	0881  BA 08DFr				     lea dx,msg_posicao_desmarcada
1  2181	0884  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  2182	0886  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  2183	0888  58				     pop ax
1  2184	0889  5A				     pop dx
   2185						     posiciona 23,47
1  2186	088A  52				     push dx
1  2187	088B  51				     push cx
1  2188	088C  53				     push bx
1  2189	088D  50				     push ax
1  2190	088E  B6 17			     mov dh,23	     ; linha
1  2191	0890  B2 2F			     mov dl,47	     ; coluna
1  2192	0892  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   2193				     zero - valor em bh
1  2194	0894  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  2195	0896  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  2196	0898  58				     pop ax
1  2197	0899  5B				     pop bx
1  2198	089A  59				     pop cx
1  2199	089B  5A				     pop dx
   2200						     escreve msg_limpa_linha
1  2201	089C  52				     push dx
1  2202	089D  50				     push ax
1  2203	089E  BA 08A0r				     lea dx,msg_limpa_linha
1  2204	08A1  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  2205	08A3  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  2206	08A5  58				     pop ax
1  2207	08A6  5A				     pop dx
   2208	08A7  EB 75 90				     jmp trata_enter_fim
   2209	08AA				     nao_pode_marcar:
   2210						     ; não pode	marcar a mina, pois já tem 15 marcada, logo avisa o usuario
   2211						     posiciona 22,47
1  2212	08AA  52				     push dx
1  2213	08AB  51				     push cx
1  2214	08AC  53				     push bx
1  2215	08AD  50				     push ax
1  2216	08AE  B6 16			     mov dh,22	     ; linha
1  2217	08B0  B2 2F			     mov dl,47	     ; coluna
1  2218	08B2  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   2219				     zero - valor em bh
1  2220	08B4  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  2221	08B6  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  2222	08B8  58				     pop ax
1  2223	08B9  5B				     pop bx
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 40
minado.ASM



1  2224	08BA  59				     pop cx
1  2225	08BB  5A				     pop dx
   2226						     escreve msg_limpa_linha
1  2227	08BC  52				     push dx
1  2228	08BD  50				     push ax
1  2229	08BE  BA 08A0r				     lea dx,msg_limpa_linha
1  2230	08C1  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  2231	08C3  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  2232	08C5  58				     pop ax
1  2233	08C6  5A				     pop dx
   2234						     posiciona 22,47
1  2235	08C7  52				     push dx
1  2236	08C8  51				     push cx
1  2237	08C9  53				     push bx
1  2238	08CA  50				     push ax
1  2239	08CB  B6 16			     mov dh,22	     ; linha
1  2240	08CD  B2 2F			     mov dl,47	     ; coluna
1  2241	08CF  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   2242				     zero - valor em bh
1  2243	08D1  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  2244	08D3  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  2245	08D5  58				     pop ax
1  2246	08D6  5B				     pop bx
1  2247	08D7  59				     pop cx
1  2248	08D8  5A				     pop dx
   2249						     escreve msg_muita_marcacao
1  2250	08D9  52				     push dx
1  2251	08DA  50				     push ax
1  2252	08DB  BA 08FFr				     lea dx,msg_muita_marcacao
1  2253	08DE  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  2254	08E0  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  2255	08E2  58				     pop ax
1  2256	08E3  5A				     pop dx
   2257						     posiciona 23,47
1  2258	08E4  52				     push dx
1  2259	08E5  51				     push cx
1  2260	08E6  53				     push bx
1  2261	08E7  50				     push ax
1  2262	08E8  B6 17			     mov dh,23	     ; linha
1  2263	08EA  B2 2F			     mov dl,47	     ; coluna
1  2264	08EC  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   2265				     zero - valor em bh
1  2266	08EE  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  2267	08F0  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  2268	08F2  58				     pop ax
1  2269	08F3  5B				     pop bx
1  2270	08F4  59				     pop cx
1  2271	08F5  5A				     pop dx
   2272						     escreve msg_limpa_linha
1  2273	08F6  52				     push dx
1  2274	08F7  50				     push ax
1  2275	08F8  BA 08A0r				     lea dx,msg_limpa_linha
1  2276	08FB  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  2277	08FD  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  2278	08FF  58				     pop ax
1  2279	0900  5A				     pop dx
   2280						     posiciona 23,47
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 41
minado.ASM



1  2281	0901  52				     push dx
1  2282	0902  51				     push cx
1  2283	0903  53				     push bx
1  2284	0904  50				     push ax
1  2285	0905  B6 17			     mov dh,23	     ; linha
1  2286	0907  B2 2F			     mov dl,47	     ; coluna
1  2287	0909  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   2288				     zero - valor em bh
1  2289	090B  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  2290	090D  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  2291	090F  58				     pop ax
1  2292	0910  5B				     pop bx
1  2293	0911  59				     pop cx
1  2294	0912  5A				     pop dx
   2295						     escreve msg_t_para_terminar
1  2296	0913  52				     push dx
1  2297	0914  50				     push ax
1  2298	0915  BA 09A1r				     lea dx,msg_t_para_terminar
1  2299	0918  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  2300	091A  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  2301	091C  58				     pop ax
1  2302	091D  5A				     pop dx
   2303	091E				     trata_enter_fim:
   2304	091E  5A				     pop dx
   2305	091F  59				     pop cx
   2306	0920  5B				     pop bx
   2307	0921  58				     pop ax
   2308	0922  C3				     ret
   2309	0923			     trata_enter endp
   2310
   2311	0923			     escreve_marcados proc
   2312	0923  50					     push ax
   2313	0924  52					     push dx
   2314	0925  51					     push cx
   2315	0926  53					     push bx
   2316	0927  8A 16 09E8r				     mov dl,linha_ascii
   2317	092B  52					     push dx
   2318							     ; posiciona o cursor em coluna:73,	linha:5, ou seja, a posição da	    +
   2319				     quantidade	de minas marcadas
   2320							     posiciona 5,73
1  2321	092C  52				     push dx
1  2322	092D  51				     push cx
1  2323	092E  53				     push bx
1  2324	092F  50				     push ax
1  2325	0930  B6 05			     mov dh,5	     ; linha
1  2326	0932  B2 49			     mov dl,73	     ; coluna
1  2327	0934  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   2328				     zero - valor em bh
1  2329	0936  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  2330	0938  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  2331	093A  58				     pop ax
1  2332	093B  5B				     pop bx
1  2333	093C  59				     pop cx
1  2334	093D  5A				     pop dx
   2335	093E  80 3E 09FFr 0A				     cmp minas_marcadas,10
   2336	0943  73 24					     jae mina_maior_ou_igual_10	; jump if above	or equal
   2337							     ; a quantidade de minas marcadas é	menor que 10
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 42
minado.ASM



   2338	0945  A0 09FFr					     mov al,minas_marcadas
   2339	0948  A2 09E8r					     mov linha_ascii,al
   2340	094B  80 0E 09E8r 30				     or	 linha_ascii,00110000B ; converte o valor decimal de 1 a 9 contido  +
   2341				     em	linha_ascii para o seu correspondente caracter ascii
   2342							     escreve zero
1  2343	0950  52				     push dx
1  2344	0951  50				     push ax
1  2345	0952  BA 09EEr				     lea dx,zero
1  2346	0955  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  2347	0957  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  2348	0959  58				     pop ax
1  2349	095A  5A				     pop dx
   2350							     escreve linha_ascii
1  2351	095B  52				     push dx
1  2352	095C  50				     push ax
1  2353	095D  BA 09E8r				     lea dx,linha_ascii
1  2354	0960  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  2355	0962  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  2356	0964  58				     pop ax
1  2357	0965  5A				     pop dx
   2358	0966  EB 2C 90					     jmp escreve_marcados_continua
   2359	0969					     mina_maior_ou_igual_10:
   2360							     escreve um
1  2361	0969  52				     push dx
1  2362	096A  50				     push ax
1  2363	096B  BA 09F0r				     lea dx,um
1  2364	096E  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  2365	0970  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  2366	0972  58				     pop ax
1  2367	0973  5A				     pop dx
   2368	0974  80 2E 09FFr 0A				     sub minas_marcadas,10
   2369	0979  A0 09FFr					     mov al,minas_marcadas
   2370	097C  A2 09E8r					     mov linha_ascii,al
   2371	097F  80 0E 09E8r 30				     or	 linha_ascii,00110000B
   2372	0984  80 06 09FFr 0A				     add minas_marcadas,10
   2373							     escreve linha_ascii
1  2374	0989  52				     push dx
1  2375	098A  50				     push ax
1  2376	098B  BA 09E8r				     lea dx,linha_ascii
1  2377	098E  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  2378	0990  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  2379	0992  58				     pop ax
1  2380	0993  5A				     pop dx
   2381	0994					     escreve_marcados_continua:
   2382							     ; posiciona o cursor em coluna:73,	linha:6, ou seja, a posição da	    +
   2383				     quantidade	de minas a marcar
   2384							     posiciona 6,73
1  2385	0994  52				     push dx
1  2386	0995  51				     push cx
1  2387	0996  53				     push bx
1  2388	0997  50				     push ax
1  2389	0998  B6 06			     mov dh,6	     ; linha
1  2390	099A  B2 49			     mov dl,73	     ; coluna
1  2391	099C  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   2392				     zero - valor em bh
1  2393	099E  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  2394	09A0  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 43
minado.ASM



1  2395	09A2  58				     pop ax
1  2396	09A3  5B				     pop bx
1  2397	09A4  59				     pop cx
1  2398	09A5  5A				     pop dx
   2399	09A6  80 3E 0A00r 0A				     cmp minas_a_marcar,10
   2400	09AB  73 24					     jae mina2_maior_igual_10 ;	jump if	above or equal
   2401	09AD  A0 0A00r					     mov al,minas_a_marcar
   2402	09B0  A2 09E8r					     mov linha_ascii,al
   2403	09B3  80 0E 09E8r 30				     or	 linha_ascii,00110000B ; converte o valor decimal de 1 a 9 contido  +
   2404				     em	linha_ascii para o seu correspondente caracter ascii
   2405							     escreve zero
1  2406	09B8  52				     push dx
1  2407	09B9  50				     push ax
1  2408	09BA  BA 09EEr				     lea dx,zero
1  2409	09BD  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  2410	09BF  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  2411	09C1  58				     pop ax
1  2412	09C2  5A				     pop dx
   2413							     escreve linha_ascii
1  2414	09C3  52				     push dx
1  2415	09C4  50				     push ax
1  2416	09C5  BA 09E8r				     lea dx,linha_ascii
1  2417	09C8  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  2418	09CA  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  2419	09CC  58				     pop ax
1  2420	09CD  5A				     pop dx
   2421	09CE  EB 2C 90					     jmp mina_marcado_fim
   2422	09D1					     mina2_maior_igual_10:
   2423							     escreve um
1  2424	09D1  52				     push dx
1  2425	09D2  50				     push ax
1  2426	09D3  BA 09F0r				     lea dx,um
1  2427	09D6  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  2428	09D8  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  2429	09DA  58				     pop ax
1  2430	09DB  5A				     pop dx
   2431	09DC  80 2E 0A00r 0A				     sub minas_a_marcar,10
   2432	09E1  A0 0A00r					     mov al,minas_a_marcar
   2433	09E4  A2 09E8r					     mov linha_ascii,al
   2434	09E7  80 0E 09E8r 30				     or	 linha_ascii,00110000B
   2435	09EC  80 06 0A00r 0A				     add minas_a_marcar,10
   2436							     escreve linha_ascii
1  2437	09F1  52				     push dx
1  2438	09F2  50				     push ax
1  2439	09F3  BA 09E8r				     lea dx,linha_ascii
1  2440	09F6  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  2441	09F8  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  2442	09FA  58				     pop ax
1  2443	09FB  5A				     pop dx
   2444	09FC					     mina_marcado_fim:
   2445							     posiciona linha_tela,coluna_tela
1  2446	09FC  52				     push dx
1  2447	09FD  51				     push cx
1  2448	09FE  53				     push bx
1  2449	09FF  50				     push ax
1  2450	0A00  8A 36 09F4r		     mov dh,linha_tela	     ; linha
1  2451	0A04  8A 16 09F5r		     mov dl,coluna_tela	     ; coluna
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 44
minado.ASM



1  2452	0A08  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   2453				     zero - valor em bh
1  2454	0A0A  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  2455	0A0C  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  2456	0A0E  58				     pop ax
1  2457	0A0F  5B				     pop bx
1  2458	0A10  59				     pop cx
1  2459	0A11  5A				     pop dx
   2460	0A12  5A					     pop dx
   2461	0A13  88 16 09E8r				     mov linha_ascii,dl
   2462	0A17  5B					     pop bx
   2463	0A18  59					     pop cx
   2464	0A19  5A					     pop dx
   2465	0A1A  58					     pop ax
   2466	0A1B  C3					     ret
   2467	0A1C				     escreve_marcados endp
   2468
   2469				     ;-----------------------------------------------------------------------------------------------
   2470				     --------------------------
   2471				     ;-----------------------------------------------------------------------------------------------
   2472				     --------------------------
   2473
   2474	0A1C			     calcula_posicoes proc
   2475	0A1C  50				     push ax
   2476	0A1D  53				     push bx
   2477	0A1E  51				     push cx
   2478	0A1F  52				     push dx
   2479	0A20  BF 0000r				     lea di,conteudo_matriz
   2480	0A23  C6 06 09F6r 00			     mov linha_matriz,0
   2481	0A28  C6 06 09F7r 00			     mov coluna_matriz,0
   2482	0A2D				     laco_calcula_posicoes:
   2483	0A2D  80 3D FF				     cmp byte ptr [di],-1
   2484	0A30  74 03				     je	quero_encontrou_mina
   2485	0A32  EB 04 90				     jmp posicoes_atualizadas
   2486	0A35				     quero_encontrou_mina:
   2487	0A35  EB 30 90				     jmp encontrou_mina
   2488	0A38				     posicoes_atualizadas:
   2489	0A38  FE 06 09F7r			     inc coluna_matriz
   2490	0A3C  80 3E 09F7r 0A			     cmp coluna_matriz,10
   2491	0A41  75 09				     jne calcula_posicoes_continua
   2492	0A43  C6 06 09F7r 00			     mov coluna_matriz,0
   2493	0A48  FE 06 09F6r			     inc linha_matriz
   2494	0A4C				     calcula_posicoes_continua:
   2495	0A4C  FE 0E 09FEr			     dec cont_posicoes
   2496	0A50  47				     inc di
   2497	0A51  80 3E 09FEr 00			     cmp cont_posicoes,0
   2498	0A56  75 0D				     jne quero_laco_calcula_posicoes
   2499	0A58  C6 06 09F4r 04			     mov linha_tela,4
   2500	0A5D  C6 06 09F5r 05			     mov coluna_tela,5
   2501	0A62  EB 73 90				     jmp near ptr calcula_posicoes_fim
   2502	0A65				     quero_laco_calcula_posicoes:
   2503	0A65  EB C6				     jmp near ptr laco_calcula_posicoes
   2504	0A67				     encontrou_mina:
   2505	0A67  80 3E 09F6r 00			     cmp linha_matriz,0
   2506	0A6C  74 24				     je	quero_grupo1
   2507	0A6E  80 3E 09F6r 09			     cmp linha_matriz,9
   2508	0A73  74 20				     je	quero_grupo2
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 45
minado.ASM



   2509	0A75  80 3E 09F7r 00			     cmp coluna_matriz,0
   2510	0A7A  74 0C				     je	quero_caso7
   2511	0A7C  80 3E 09F7r 09			     cmp coluna_matriz,9
   2512	0A81  74 0A				     je	quero_caso8
   2513	0A83  E8 0192				     call calcula_posicoes_caso9
   2514	0A86  EB B0				     jmp near ptr posicoes_atualizadas
   2515	0A88				     quero_caso7:
   2516	0A88  E8 0129				     call calcula_posicoes_caso7
   2517	0A8B  EB AB				     jmp near ptr posicoes_atualizadas
   2518	0A8D				     quero_caso8:
   2519	0A8D  E8 0156				     call calcula_posicoes_caso8
   2520	0A90  EB A6				     jmp near ptr posicoes_atualizadas
   2521	0A92				     quero_grupo1:
   2522	0A92  EB 06 90				     jmp near ptr calcula_posicoes_grupo1
   2523	0A95				     quero_grupo2:
   2524	0A95  EB 20 90				     jmp near ptr calcula_posicoes_grupo2
   2525	0A98  EB 9E				     jmp near ptr posicoes_atualizadas
   2526
   2527	0A9A				     calcula_posicoes_grupo1:
   2528	0A9A  80 3E 09F7r 00			     cmp coluna_matriz,0
   2529	0A9F  74 0C				     je	quero_caso1
   2530	0AA1  80 3E 09F7r 09			     cmp coluna_matriz,9
   2531	0AA6  74 0A				     je	quero_caso2
   2532	0AA8  E8 006D				     call calcula_posicoes_caso3
   2533	0AAB  EB 8B				     jmp near ptr posicoes_atualizadas
   2534	0AAD				     quero_caso1:
   2535	0AAD  E8 002C				     call calcula_posicoes_caso1
   2536	0AB0  EB 86				     jmp near ptr posicoes_atualizadas
   2537	0AB2				     quero_caso2:
   2538	0AB2  E8 0045				     call calcula_posicoes_caso2
   2539	0AB5  EB 81				     jmp near ptr posicoes_atualizadas
   2540
   2541	0AB7				     calcula_posicoes_grupo2:
   2542	0AB7  80 3E 09F7r 00			     cmp coluna_matriz,0
   2543	0ABC  74 0D				     je	quero_caso4
   2544	0ABE  80 3E 09F7r 09			     cmp coluna_matriz,9
   2545	0AC3  74 0C				     je	quero_caso5
   2546	0AC5  E8 00BC				     call calcula_posicoes_caso6
   2547	0AC8  E9 FF6D				     jmp near ptr posicoes_atualizadas
   2548	0ACB				     quero_caso4:
   2549	0ACB  E8 007A				     call calcula_posicoes_caso4
   2550	0ACE  E9 FF67				     jmp near ptr posicoes_atualizadas
   2551	0AD1				     quero_caso5:
   2552	0AD1  E8 0092				     call calcula_posicoes_caso5
   2553	0AD4  E9 FF61				     jmp near ptr posicoes_atualizadas
   2554	0AD7				     calcula_posicoes_fim:
   2555	0AD7  5A				     pop dx
   2556	0AD8  59				     pop cx
   2557	0AD9  5B				     pop bx
   2558	0ADA  58				     pop ax
   2559	0ADB  C3				     ret
   2560	0ADC			     calcula_posicoes endp
   2561
   2562					     ; Caso1: [0,0]
   2563	0ADC				     calcula_posicoes_caso1 proc
   2564	0ADC  47				     inc di  ; avança uma posição na matriz
   2565	0ADD  80 3D FF				     cmp byte ptr [di],-1
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 46
minado.ASM



   2566	0AE0  74 02				     je	caso1_1
   2567	0AE2  FE 05				     inc byte ptr [di]
   2568	0AE4				     caso1_1:
   2569	0AE4  83 C7 09				     add di,9
   2570	0AE7  80 3D FF				     cmp byte ptr [di],-1
   2571	0AEA  74 02				     je	caso1_2
   2572	0AEC  FE 05				     inc byte ptr [di]
   2573	0AEE				     caso1_2:
   2574	0AEE  47				     inc di
   2575	0AEF  80 3D FF				     cmp byte ptr [di],-1
   2576	0AF2  74 02				     je	caso1_3
   2577	0AF4  FE 05				     inc byte ptr [di]
   2578	0AF6				     caso1_3:
   2579	0AF6  83 EF 0B				     sub di,11 ; volta a apontar para a	posição	que contém a mina
   2580	0AF9  C3				     ret
   2581	0AFA				     calcula_posicoes_caso1 endp
   2582
   2583					     ; Caso2: [0,9]
   2584	0AFA				     calcula_posicoes_caso2 proc
   2585	0AFA  4F				     dec di
   2586	0AFB  80 3D FF				     cmp byte ptr [di],-1
   2587	0AFE  74 02				     je	caso2_1
   2588	0B00  FE 05				     inc byte ptr [di]
   2589	0B02				     caso2_1:
   2590	0B02  83 C7 0A				     add di,10
   2591	0B05  80 3D FF				     cmp byte ptr [di],-1
   2592	0B08  74 02				     je	caso2_2
   2593	0B0A  FE 05				     inc byte ptr [di]
   2594	0B0C				     caso2_2:
   2595	0B0C  47				     inc di
   2596	0B0D  80 3D FF				     cmp byte ptr [di],-1
   2597	0B10  74 02				     je	caso2_3
   2598	0B12  FE 05				     inc byte ptr [di]
   2599	0B14				     caso2_3:
   2600	0B14  83 EF 0A				     sub di,10
   2601	0B17  C3				     ret
   2602	0B18				     calcula_posicoes_caso2 endp
   2603
   2604					     ; Caso3: [0,1-8]
   2605	0B18				     calcula_posicoes_caso3 proc
   2606	0B18  4F				     dec di  ; avança uma posição na matriz
   2607	0B19  80 3D FF				     cmp byte ptr [di],-1
   2608	0B1C  74 02				     je	caso3_1
   2609	0B1E  FE 05				     inc byte ptr [di]
   2610	0B20				     caso3_1:
   2611	0B20  83 C7 02				     add di,2
   2612	0B23  80 3D FF				     cmp byte ptr [di],-1
   2613	0B26  74 02				     je	caso3_2
   2614	0B28  FE 05				     inc byte ptr [di]
   2615	0B2A				     caso3_2:
   2616	0B2A  83 C7 08				     add di,8
   2617	0B2D  80 3D FF				     cmp byte ptr [di],-1
   2618	0B30  74 02				     je	caso3_3
   2619	0B32  FE 05				     inc byte ptr [di]
   2620	0B34				     caso3_3:
   2621	0B34  47				     inc di
   2622	0B35  80 3D FF				     cmp byte ptr [di],-1
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 47
minado.ASM



   2623	0B38  74 02				     je	caso3_4
   2624	0B3A  FE 05				     inc byte ptr [di]
   2625	0B3C				     caso3_4:
   2626	0B3C  47				     inc di
   2627	0B3D  80 3D FF				     cmp byte ptr [di],-1
   2628	0B40  74 02				     je	caso3_5
   2629	0B42  FE 05				     inc byte ptr [di]
   2630	0B44				     caso3_5:
   2631	0B44  83 EF 0B				     sub di,11 ; volta a apontar para a	posição	que contém a mina
   2632	0B47  C3				     ret
   2633	0B48				     calcula_posicoes_caso3 endp
   2634
   2635					     ; Caso4: [9,0]
   2636	0B48				     calcula_posicoes_caso4 proc
   2637	0B48  47				     inc di
   2638	0B49  80 3D FF				     cmp byte ptr [di],-1
   2639	0B4C  74 02				     je	caso4_1
   2640	0B4E  FE 05				     inc byte ptr [di]
   2641	0B50				     caso4_1:
   2642	0B50  83 EF 0A				     sub di,10
   2643	0B53  80 3D FF				     cmp byte ptr [di],-1
   2644	0B56  74 02				     je	caso4_2
   2645	0B58  FE 05				     inc byte ptr [di]
   2646	0B5A				     caso4_2:
   2647	0B5A  4F				     dec di
   2648	0B5B  80 3D FF				     cmp byte ptr [di],-1
   2649	0B5E  74 02				     je	caso4_3
   2650	0B60  FE 05				     inc byte ptr [di]
   2651	0B62				     caso4_3:
   2652	0B62  83 C7 0A				     add di,10
   2653	0B65  C3				     ret
   2654	0B66				     calcula_posicoes_caso4 endp
   2655
   2656					     ; Caso5: [9,9]
   2657	0B66				     calcula_posicoes_caso5 proc
   2658	0B66  4F				     dec di
   2659	0B67  80 3D FF				     cmp byte ptr [di],-1
   2660	0B6A  74 02				     je	caso5_1
   2661	0B6C  FE 05				     inc byte ptr [di]
   2662	0B6E				     caso5_1:
   2663	0B6E  83 EF 09				     sub di,9
   2664	0B71  80 3D FF				     cmp byte ptr [di],-1
   2665	0B74  74 02				     je	caso5_2
   2666	0B76  FE 05				     inc byte ptr [di]
   2667	0B78				     caso5_2:
   2668	0B78  4F				     dec di
   2669	0B79  80 3D FF				     cmp byte ptr [di],-1
   2670	0B7C  74 02				     je	caso5_3
   2671	0B7E  FE 05				     inc byte ptr [di]
   2672	0B80				     caso5_3:
   2673	0B80  83 C7 0B				     add di,11
   2674	0B83  C3				     ret
   2675	0B84				     calcula_posicoes_caso5 endp
   2676
   2677					     ; Caso6: [9,1-8]
   2678	0B84				     calcula_posicoes_caso6 proc
   2679	0B84  47				     inc di
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 48
minado.ASM



   2680	0B85  80 3D FF				     cmp byte ptr [di],-1
   2681	0B88  74 02				     je	caso6_1
   2682	0B8A  FE 05				     inc byte ptr [di]
   2683	0B8C				     caso6_1:
   2684	0B8C  83 EF 02				     sub di,2
   2685	0B8F  80 3D FF				     cmp byte ptr [di],-1
   2686	0B92  74 02				     je	caso6_2
   2687	0B94  FE 05				     inc byte ptr [di]
   2688	0B96				     caso6_2:
   2689	0B96  83 EF 08				     sub di,8
   2690	0B99  80 3D FF				     cmp byte ptr [di],-1
   2691	0B9C  74 02				     je	caso6_3
   2692	0B9E  FE 05				     inc byte ptr [di]
   2693	0BA0				     caso6_3:
   2694	0BA0  4F				     dec di
   2695	0BA1  80 3D FF				     cmp byte ptr [di],-1
   2696	0BA4  74 02				     je	caso6_4
   2697	0BA6  FE 05				     inc byte ptr [di]
   2698	0BA8				     caso6_4:
   2699	0BA8  4F				     dec di
   2700	0BA9  80 3D FF				     cmp byte ptr [di],-1
   2701	0BAC  74 02				     je	caso6_5
   2702	0BAE  FE 05				     inc byte ptr [di]
   2703	0BB0				     caso6_5:
   2704	0BB0  83 C7 0B				     add di,11
   2705	0BB3  C3				     ret
   2706	0BB4				     calcula_posicoes_caso6 endp
   2707
   2708					     ; Caso7: [2-8,0]
   2709	0BB4				     calcula_posicoes_caso7 proc
   2710	0BB4  83 EF 0A				     sub di,10
   2711	0BB7  80 3D FF				     cmp byte ptr [di],-1
   2712	0BBA  74 02				     je	caso7_1
   2713	0BBC  FE 05				     inc byte ptr [di]
   2714	0BBE				     caso7_1:
   2715	0BBE  47				     inc di
   2716	0BBF  80 3D FF				     cmp byte ptr [di],-1
   2717	0BC2  74 02				     je	caso7_2
   2718	0BC4  FE 05				     inc byte ptr [di]
   2719	0BC6				     caso7_2:
   2720	0BC6  83 C7 0A				     add di,10
   2721	0BC9  80 3D FF				     cmp byte ptr [di],-1
   2722	0BCC  74 02				     je	caso7_3
   2723	0BCE  FE 05				     inc byte ptr [di]
   2724	0BD0				     caso7_3:
   2725	0BD0  83 C7 09				     add di,9
   2726	0BD3  80 3D FF				     cmp byte ptr [di],-1
   2727	0BD6  74 02				     je	caso7_4
   2728	0BD8  FE 05				     inc byte ptr [di]
   2729	0BDA				     caso7_4:
   2730	0BDA  47				     inc di
   2731	0BDB  80 3D FF				     cmp byte ptr [di],-1
   2732	0BDE  74 02				     je	caso7_5
   2733	0BE0  FE 05				     inc byte ptr [di]
   2734	0BE2				     caso7_5:
   2735	0BE2  83 EF 0B				     sub di,11
   2736	0BE5  C3				     ret
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 49
minado.ASM



   2737	0BE6				     calcula_posicoes_caso7 endp
   2738
   2739					     ; Caso8: [2-8,9]
   2740	0BE6				     calcula_posicoes_caso8 proc
   2741	0BE6  83 EF 0B				     sub di,11
   2742	0BE9  80 3D FF				     cmp byte ptr [di],-1
   2743	0BEC  74 02				     je	caso8_1
   2744	0BEE  FE 05				     inc byte ptr [di]
   2745	0BF0				     caso8_1:
   2746	0BF0  47				     inc di
   2747	0BF1  80 3D FF				     cmp byte ptr [di],-1
   2748	0BF4  74 02				     je	caso8_2
   2749	0BF6  FE 05				     inc byte ptr [di]
   2750	0BF8				     caso8_2:
   2751	0BF8  83 C7 09				     add di,9
   2752	0BFB  80 3D FF				     cmp byte ptr [di],-1
   2753	0BFE  74 02				     je	caso8_3
   2754	0C00  FE 05				     inc byte ptr [di]
   2755	0C02				     caso8_3:
   2756	0C02  83 C7 0A				     add di,10
   2757	0C05  80 3D FF				     cmp byte ptr [di],-1
   2758	0C08  74 02				     je	caso8_4
   2759	0C0A  FE 05				     inc byte ptr [di]
   2760	0C0C				     caso8_4:
   2761	0C0C  47				     inc di
   2762	0C0D  80 3D FF				     cmp byte ptr [di],-1
   2763	0C10  74 02				     je	caso8_5
   2764	0C12  FE 05				     inc byte ptr [di]
   2765	0C14				     caso8_5:
   2766	0C14  83 EF 0A				     sub di,10
   2767	0C17  C3				     ret
   2768	0C18				     calcula_posicoes_caso8 endp
   2769
   2770					     ; Caso9: [2-8,2-8]
   2771	0C18				     calcula_posicoes_caso9 proc
   2772	0C18  83 EF 0B				     sub di,11
   2773	0C1B  80 3D FF				     cmp byte ptr [di],-1
   2774	0C1E  74 02				     je	caso9_1
   2775	0C20  FE 05				     inc byte ptr [di]
   2776	0C22				     caso9_1:
   2777	0C22  47				     inc di
   2778	0C23  80 3D FF				     cmp byte ptr [di],-1
   2779	0C26  74 02				     je	caso9_2
   2780	0C28  FE 05				     inc byte ptr [di]
   2781	0C2A				     caso9_2:
   2782	0C2A  47				     inc di
   2783	0C2B  80 3D FF				     cmp byte ptr [di],-1
   2784	0C2E  74 02				     je	caso9_3
   2785	0C30  FE 05				     inc byte ptr [di]
   2786	0C32				     caso9_3:
   2787	0C32  83 C7 08				     add di,8
   2788	0C35  80 3D FF				     cmp byte ptr [di],-1
   2789	0C38  74 02				     je	caso9_4
   2790	0C3A  FE 05				     inc byte ptr [di]
   2791	0C3C				     caso9_4:
   2792	0C3C  83 C7 02				     add di,2
   2793	0C3F  80 3D FF				     cmp byte ptr [di],-1
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 50
minado.ASM



   2794	0C42  74 02				     je	caso9_5
   2795	0C44  FE 05				     inc byte ptr [di]
   2796	0C46				     caso9_5:
   2797	0C46  83 C7 08				     add di,8
   2798	0C49  80 3D FF				     cmp byte ptr [di],-1
   2799	0C4C  74 02				     je	caso9_6
   2800	0C4E  FE 05				     inc byte ptr [di]
   2801	0C50				     caso9_6:
   2802	0C50  47				     inc di
   2803	0C51  80 3D FF				     cmp byte ptr [di],-1
   2804	0C54  74 02				     je	caso9_7
   2805	0C56  FE 05				     inc byte ptr [di]
   2806	0C58				     caso9_7:
   2807	0C58  47				     inc di
   2808	0C59  80 3D FF				     cmp byte ptr [di],-1
   2809	0C5C  74 02				     je	caso9_8
   2810	0C5E  FE 05				     inc byte ptr [di]
   2811	0C60				     caso9_8:
   2812	0C60  83 EF 0B				     sub di,11
   2813	0C63  C3				     ret
   2814	0C64				     calcula_posicoes_caso9 endp
   2815
   2816
   2817
   2818				     ;-----------------------------------------------------------------------------------------------
   2819				     --------------------------
   2820				     ;-----------------------------------------------------------------------------------------------
   2821				     --------------------------
   2822
   2823	0C64			     trata_tab proc
   2824						     posiciona 12,68
1  2825	0C64  52				     push dx
1  2826	0C65  51				     push cx
1  2827	0C66  53				     push bx
1  2828	0C67  50				     push ax
1  2829	0C68  B6 0C			     mov dh,12	     ; linha
1  2830	0C6A  B2 44			     mov dl,68	     ; coluna
1  2831	0C6C  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   2832				     zero - valor em bh
1  2833	0C6E  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  2834	0C70  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  2835	0C72  58				     pop ax
1  2836	0C73  5B				     pop bx
1  2837	0C74  59				     pop cx
1  2838	0C75  5A				     pop dx
   2839	0C76  80 3E 09FBr 4D			     cmp selecao_AM,4DH	     ; 4DH - M	     ; 41H - A,	4DH - M
   2840	0C7B  74 27				     je	coloca_A		     ; selcao_AM == 'M', logo devemos colocar o	A
   2841	0C7D  C6 06 09FBr 4D			     mov selecao_AM,4DH	 ; selcao_AM = 'M'
   2842						     escreve opcao_marcar
1  2843	0C82  52				     push dx
1  2844	0C83  50				     push ax
1  2845	0C84  BA 09E4r				     lea dx,opcao_marcar
1  2846	0C87  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  2847	0C89  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  2848	0C8B  58				     pop ax
1  2849	0C8C  5A				     pop dx
   2850						     posiciona linha_tela,coluna_tela
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 51
minado.ASM



1  2851	0C8D  52				     push dx
1  2852	0C8E  51				     push cx
1  2853	0C8F  53				     push bx
1  2854	0C90  50				     push ax
1  2855	0C91  8A 36 09F4r		     mov dh,linha_tela	     ; linha
1  2856	0C95  8A 16 09F5r		     mov dl,coluna_tela	     ; coluna
1  2857	0C99  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   2858				     zero - valor em bh
1  2859	0C9B  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  2860	0C9D  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  2861	0C9F  58				     pop ax
1  2862	0CA0  5B				     pop bx
1  2863	0CA1  59				     pop cx
1  2864	0CA2  5A				     pop dx
   2865	0CA3  C3				     ret
   2866	0CA4				     coloca_A:
   2867	0CA4  C6 06 09FBr 41			     mov selecao_AM,41H	 ; selcao_AM = 'A'
   2868						     escreve opcao_abrir
1  2869	0CA9  52				     push dx
1  2870	0CAA  50				     push ax
1  2871	0CAB  BA 09E6r				     lea dx,opcao_abrir
1  2872	0CAE  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  2873	0CB0  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  2874	0CB2  58				     pop ax
1  2875	0CB3  5A				     pop dx
   2876						     posiciona linha_tela,coluna_tela
1  2877	0CB4  52				     push dx
1  2878	0CB5  51				     push cx
1  2879	0CB6  53				     push bx
1  2880	0CB7  50				     push ax
1  2881	0CB8  8A 36 09F4r		     mov dh,linha_tela	     ; linha
1  2882	0CBC  8A 16 09F5r		     mov dl,coluna_tela	     ; coluna
1  2883	0CC0  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   2884				     zero - valor em bh
1  2885	0CC2  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  2886	0CC4  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  2887	0CC6  58				     pop ax
1  2888	0CC7  5B				     pop bx
1  2889	0CC8  59				     pop cx
1  2890	0CC9  5A				     pop dx
   2891	0CCA  C3				     ret
   2892	0CCB			     trata_tab endp
   2893
   2894				     ;-----------------------------------------------------------------------------------------------
   2895				     --------------------------
   2896				     ;-----------------------------------------------------------------------------------------------
   2897				     --------------------------
   2898
   2899	0CCB			     trata_up proc
   2900						     exclui_marcador
1  2901	0CCB  FE 0E 09F5r			     dec coluna_tela
1  2902	0CCF  8A 36 09F4r			     mov dh,linha_tela
1  2903	0CD3  8A 16 09F5r			     mov dl,coluna_tela
1  2904	0CD7  B7 00				     mov bh,0
1  2905	0CD9  B4 02				     mov ah,2
1  2906	0CDB  CD 10				     int 10H
1  2907						     escreve pos_campo_vazio
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 52
minado.ASM



2  2908	0CDD  52				     push dx
2  2909	0CDE  50				     push ax
2  2910	0CDF  BA 089Cr				     lea dx,pos_campo_vazio
2  2911	0CE2  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
2  2912	0CE4  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
2  2913	0CE6  58				     pop ax
2  2914	0CE7  5A				     pop dx
1  2915	0CE8  80 06 09F5r 02			     add coluna_tela,2
1  2916						     posiciona linha_tela,coluna_tela
2  2917	0CED  52				     push dx
2  2918	0CEE  51				     push cx
2  2919	0CEF  53				     push bx
2  2920	0CF0  50				     push ax
2  2921	0CF1  8A 36 09F4r		     mov dh,linha_tela	     ; linha
2  2922	0CF5  8A 16 09F5r		     mov dl,coluna_tela	     ; coluna
2  2923	0CF9  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   2924				     zero - valor em bh
2  2925	0CFB  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
2  2926	0CFD  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
2  2927	0CFF  58				     pop ax
2  2928	0D00  5B				     pop bx
2  2929	0D01  59				     pop cx
2  2930	0D02  5A				     pop dx
1  2931						     escreve pos_campo_vazio
2  2932	0D03  52				     push dx
2  2933	0D04  50				     push ax
2  2934	0D05  BA 089Cr				     lea dx,pos_campo_vazio
2  2935	0D08  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
2  2936	0D0A  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
2  2937	0D0C  58				     pop ax
2  2938	0D0D  5A				     pop dx
1  2939	0D0E  80 2E 09F5r 02			     sub coluna_tela,2
1  2940						     posiciona linha_tela,coluna_tela
2  2941	0D13  52				     push dx
2  2942	0D14  51				     push cx
2  2943	0D15  53				     push bx
2  2944	0D16  50				     push ax
2  2945	0D17  8A 36 09F4r		     mov dh,linha_tela	     ; linha
2  2946	0D1B  8A 16 09F5r		     mov dl,coluna_tela	     ; coluna
2  2947	0D1F  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   2948				     zero - valor em bh
2  2949	0D21  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
2  2950	0D23  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
2  2951	0D25  58				     pop ax
2  2952	0D26  5B				     pop bx
2  2953	0D27  59				     pop cx
2  2954	0D28  5A				     pop dx
   2955	0D29  80 3E 09F4r 04			     cmp linha_tela,4
   2956	0D2E  75 06				     jne linhadec_up
   2957	0D30  C6 06 09F4r 16			     mov linha_tela,22 ; como jne não desvio, então é verdade que linha_tela ==	4,  +
   2958				     logo o cursor dá a	volta
   2959	0D35  C3				     ret
   2960	0D36				     linhadec_up:
   2961	0D36  80 2E 09F4r 02			     sub linha_tela,2 ;	como o cursor não está na primeira linha da matriz, então   +
   2962				     ele pode subir
   2963	0D3B  C3				     ret
   2964	0D3C			     trata_up endp
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 53
minado.ASM



   2965
   2966				     ;-----------------------------------------------------------------------------------------------
   2967				     --------------------------
   2968				     ;-----------------------------------------------------------------------------------------------
   2969				     --------------------------
   2970
   2971	0D3C			     trata_down	proc
   2972						     exclui_marcador
1  2973	0D3C  FE 0E 09F5r			     dec coluna_tela
1  2974	0D40  8A 36 09F4r			     mov dh,linha_tela
1  2975	0D44  8A 16 09F5r			     mov dl,coluna_tela
1  2976	0D48  B7 00				     mov bh,0
1  2977	0D4A  B4 02				     mov ah,2
1  2978	0D4C  CD 10				     int 10H
1  2979						     escreve pos_campo_vazio
2  2980	0D4E  52				     push dx
2  2981	0D4F  50				     push ax
2  2982	0D50  BA 089Cr				     lea dx,pos_campo_vazio
2  2983	0D53  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
2  2984	0D55  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
2  2985	0D57  58				     pop ax
2  2986	0D58  5A				     pop dx
1  2987	0D59  80 06 09F5r 02			     add coluna_tela,2
1  2988						     posiciona linha_tela,coluna_tela
2  2989	0D5E  52				     push dx
2  2990	0D5F  51				     push cx
2  2991	0D60  53				     push bx
2  2992	0D61  50				     push ax
2  2993	0D62  8A 36 09F4r		     mov dh,linha_tela	     ; linha
2  2994	0D66  8A 16 09F5r		     mov dl,coluna_tela	     ; coluna
2  2995	0D6A  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   2996				     zero - valor em bh
2  2997	0D6C  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
2  2998	0D6E  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
2  2999	0D70  58				     pop ax
2  3000	0D71  5B				     pop bx
2  3001	0D72  59				     pop cx
2  3002	0D73  5A				     pop dx
1  3003						     escreve pos_campo_vazio
2  3004	0D74  52				     push dx
2  3005	0D75  50				     push ax
2  3006	0D76  BA 089Cr				     lea dx,pos_campo_vazio
2  3007	0D79  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
2  3008	0D7B  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
2  3009	0D7D  58				     pop ax
2  3010	0D7E  5A				     pop dx
1  3011	0D7F  80 2E 09F5r 02			     sub coluna_tela,2
1  3012						     posiciona linha_tela,coluna_tela
2  3013	0D84  52				     push dx
2  3014	0D85  51				     push cx
2  3015	0D86  53				     push bx
2  3016	0D87  50				     push ax
2  3017	0D88  8A 36 09F4r		     mov dh,linha_tela	     ; linha
2  3018	0D8C  8A 16 09F5r		     mov dl,coluna_tela	     ; coluna
2  3019	0D90  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   3020				     zero - valor em bh
2  3021	0D92  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 54
minado.ASM



2  3022	0D94  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
2  3023	0D96  58				     pop ax
2  3024	0D97  5B				     pop bx
2  3025	0D98  59				     pop cx
2  3026	0D99  5A				     pop dx
   3027	0D9A  80 3E 09F4r 16			     cmp linha_tela,22
   3028	0D9F  75 06				     jne linhainc_down
   3029	0DA1  C6 06 09F4r 04			     mov linha_tela,4 ;	como jne não desvio, então é verdade que linha_tela == 22,  +
   3030				     logo o cursor dá a	volta
   3031	0DA6  C3				     ret
   3032	0DA7				     linhainc_down:
   3033	0DA7  80 06 09F4r 02			     add linha_tela,2 ;	como o cursor não está na última linha da matriz, então	ele +
   3034				     pode descer
   3035	0DAC  C3				     ret
   3036	0DAD			     trata_down	endp
   3037
   3038				     ;-----------------------------------------------------------------------------------------------
   3039				     --------------------------
   3040				     ;-----------------------------------------------------------------------------------------------
   3041				     --------------------------
   3042
   3043	0DAD			     trata_left	proc
   3044						     exclui_marcador
1  3045	0DAD  FE 0E 09F5r			     dec coluna_tela
1  3046	0DB1  8A 36 09F4r			     mov dh,linha_tela
1  3047	0DB5  8A 16 09F5r			     mov dl,coluna_tela
1  3048	0DB9  B7 00				     mov bh,0
1  3049	0DBB  B4 02				     mov ah,2
1  3050	0DBD  CD 10				     int 10H
1  3051						     escreve pos_campo_vazio
2  3052	0DBF  52				     push dx
2  3053	0DC0  50				     push ax
2  3054	0DC1  BA 089Cr				     lea dx,pos_campo_vazio
2  3055	0DC4  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
2  3056	0DC6  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
2  3057	0DC8  58				     pop ax
2  3058	0DC9  5A				     pop dx
1  3059	0DCA  80 06 09F5r 02			     add coluna_tela,2
1  3060						     posiciona linha_tela,coluna_tela
2  3061	0DCF  52				     push dx
2  3062	0DD0  51				     push cx
2  3063	0DD1  53				     push bx
2  3064	0DD2  50				     push ax
2  3065	0DD3  8A 36 09F4r		     mov dh,linha_tela	     ; linha
2  3066	0DD7  8A 16 09F5r		     mov dl,coluna_tela	     ; coluna
2  3067	0DDB  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   3068				     zero - valor em bh
2  3069	0DDD  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
2  3070	0DDF  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
2  3071	0DE1  58				     pop ax
2  3072	0DE2  5B				     pop bx
2  3073	0DE3  59				     pop cx
2  3074	0DE4  5A				     pop dx
1  3075						     escreve pos_campo_vazio
2  3076	0DE5  52				     push dx
2  3077	0DE6  50				     push ax
2  3078	0DE7  BA 089Cr				     lea dx,pos_campo_vazio
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 55
minado.ASM



2  3079	0DEA  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
2  3080	0DEC  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
2  3081	0DEE  58				     pop ax
2  3082	0DEF  5A				     pop dx
1  3083	0DF0  80 2E 09F5r 02			     sub coluna_tela,2
1  3084						     posiciona linha_tela,coluna_tela
2  3085	0DF5  52				     push dx
2  3086	0DF6  51				     push cx
2  3087	0DF7  53				     push bx
2  3088	0DF8  50				     push ax
2  3089	0DF9  8A 36 09F4r		     mov dh,linha_tela	     ; linha
2  3090	0DFD  8A 16 09F5r		     mov dl,coluna_tela	     ; coluna
2  3091	0E01  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   3092				     zero - valor em bh
2  3093	0E03  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
2  3094	0E05  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
2  3095	0E07  58				     pop ax
2  3096	0E08  5B				     pop bx
2  3097	0E09  59				     pop cx
2  3098	0E0A  5A				     pop dx
   3099	0E0B  80 3E 09F5r 04			     cmp coluna_tela,4
   3100	0E10  75 06				     jne linhadec_left
   3101	0E12  C6 06 09F5r 28			     mov coluna_tela,40	; como jne não desvio, então é verdade que coluna_tela == 4,+
   3102				     então o cursor deve dar a volta
   3103	0E17  C3				     ret
   3104	0E18				     linhadec_left:
   3105	0E18  80 2E 09F5r 04			     sub coluna_tela,4 ; como o	cursor não está	na primeira coluna da matriz, então +
   3106				     ele pode ir para a	esquerda
   3107	0E1D  C3				     ret
   3108	0E1E			     trata_left	endp
   3109
   3110				     ;-----------------------------------------------------------------------------------------------
   3111				     --------------------------
   3112				     ;-----------------------------------------------------------------------------------------------
   3113				     --------------------------
   3114
   3115	0E1E			     trata_right proc
   3116						     exclui_marcador
1  3117	0E1E  FE 0E 09F5r			     dec coluna_tela
1  3118	0E22  8A 36 09F4r			     mov dh,linha_tela
1  3119	0E26  8A 16 09F5r			     mov dl,coluna_tela
1  3120	0E2A  B7 00				     mov bh,0
1  3121	0E2C  B4 02				     mov ah,2
1  3122	0E2E  CD 10				     int 10H
1  3123						     escreve pos_campo_vazio
2  3124	0E30  52				     push dx
2  3125	0E31  50				     push ax
2  3126	0E32  BA 089Cr				     lea dx,pos_campo_vazio
2  3127	0E35  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
2  3128	0E37  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
2  3129	0E39  58				     pop ax
2  3130	0E3A  5A				     pop dx
1  3131	0E3B  80 06 09F5r 02			     add coluna_tela,2
1  3132						     posiciona linha_tela,coluna_tela
2  3133	0E40  52				     push dx
2  3134	0E41  51				     push cx
2  3135	0E42  53				     push bx
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 56
minado.ASM



2  3136	0E43  50				     push ax
2  3137	0E44  8A 36 09F4r		     mov dh,linha_tela	     ; linha
2  3138	0E48  8A 16 09F5r		     mov dl,coluna_tela	     ; coluna
2  3139	0E4C  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   3140				     zero - valor em bh
2  3141	0E4E  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
2  3142	0E50  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
2  3143	0E52  58				     pop ax
2  3144	0E53  5B				     pop bx
2  3145	0E54  59				     pop cx
2  3146	0E55  5A				     pop dx
1  3147						     escreve pos_campo_vazio
2  3148	0E56  52				     push dx
2  3149	0E57  50				     push ax
2  3150	0E58  BA 089Cr				     lea dx,pos_campo_vazio
2  3151	0E5B  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
2  3152	0E5D  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
2  3153	0E5F  58				     pop ax
2  3154	0E60  5A				     pop dx
1  3155	0E61  80 2E 09F5r 02			     sub coluna_tela,2
1  3156						     posiciona linha_tela,coluna_tela
2  3157	0E66  52				     push dx
2  3158	0E67  51				     push cx
2  3159	0E68  53				     push bx
2  3160	0E69  50				     push ax
2  3161	0E6A  8A 36 09F4r		     mov dh,linha_tela	     ; linha
2  3162	0E6E  8A 16 09F5r		     mov dl,coluna_tela	     ; coluna
2  3163	0E72  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   3164				     zero - valor em bh
2  3165	0E74  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
2  3166	0E76  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
2  3167	0E78  58				     pop ax
2  3168	0E79  5B				     pop bx
2  3169	0E7A  59				     pop cx
2  3170	0E7B  5A				     pop dx
   3171	0E7C  80 3E 09F5r 28			     cmp coluna_tela,40
   3172	0E81  75 06				     jne linhainc_left
   3173	0E83  C6 06 09F5r 04			     mov coluna_tela,4 ; como jne não desvio, então é verdade que coluna_tela == 41,+
   3174				     logo o cursor dá a	volta
   3175	0E88  C3				     ret
   3176	0E89				     linhainc_left:
   3177	0E89  80 06 09F5r 04			     add coluna_tela,4 ; como o	cursor não está	na última coluna da matriz, então   +
   3178				     ele pode ir para a	direita
   3179	0E8E  C3				     ret
   3180	0E8F			     trata_right endp
   3181
   3182				     ;-----------------------------------------------------------------------------------------------
   3183				     --------------------------
   3184				     ;-----------------------------------------------------------------------------------------------
   3185				     --------------------------
   3186
   3187	0E8F			     escreve_coordenadas proc
   3188						     ; primeiro	escreve	a coordenada de	linha
   3189	0E8F  50				     push ax
   3190	0E90  52				     push dx
   3191						     posiciona 10,56
1  3192	0E91  52				     push dx
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 57
minado.ASM



1  3193	0E92  51				     push cx
1  3194	0E93  53				     push bx
1  3195	0E94  50				     push ax
1  3196	0E95  B6 0A			     mov dh,10	     ; linha
1  3197	0E97  B2 38			     mov dl,56	     ; coluna
1  3198	0E99  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   3199				     zero - valor em bh
1  3200	0E9B  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  3201	0E9D  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  3202	0E9F  58				     pop ax
1  3203	0EA0  5B				     pop bx
1  3204	0EA1  59				     pop cx
1  3205	0EA2  5A				     pop dx
   3206	0EA3  8A 16 09F6r			     mov dl,linha_matriz
   3207	0EA7  88 16 09E8r			     mov linha_ascii,dl
   3208	0EAB  80 3E 09F6r 0A			     cmp linha_matriz,10
   3209	0EB0  74 1E				     je	linha_igual_10 ; jump if above or equal
   3210	0EB2  80 0E 09E8r 30			     or	 linha_ascii,00110000B ; converte o valor decimal de 1 a 9 contido em	    +
   3211				     linha_ascii para o	seu correspondente caracter ascii
   3212						     escreve ZERO
1  3213	0EB7  52				     push dx
1  3214	0EB8  50				     push ax
1  3215	0EB9  BA 09EEr				     lea dx,ZERO
1  3216	0EBC  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  3217	0EBE  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  3218	0EC0  58				     pop ax
1  3219	0EC1  5A				     pop dx
   3220						     escreve linha_ascii
1  3221	0EC2  52				     push dx
1  3222	0EC3  50				     push ax
1  3223	0EC4  BA 09E8r				     lea dx,linha_ascii
1  3224	0EC7  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  3225	0EC9  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  3226	0ECB  58				     pop ax
1  3227	0ECC  5A				     pop dx
   3228	0ECD  EB 17 90				     jmp escreve_coordenadas_continua
   3229	0ED0				     linha_igual_10:
   3230						     escreve UM
1  3231	0ED0  52				     push dx
1  3232	0ED1  50				     push ax
1  3233	0ED2  BA 09F0r				     lea dx,UM
1  3234	0ED5  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  3235	0ED7  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  3236	0ED9  58				     pop ax
1  3237	0EDA  5A				     pop dx
   3238						     escreve ZERO
1  3239	0EDB  52				     push dx
1  3240	0EDC  50				     push ax
1  3241	0EDD  BA 09EEr				     lea dx,ZERO
1  3242	0EE0  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  3243	0EE2  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  3244	0EE4  58				     pop ax
1  3245	0EE5  5A				     pop dx
   3246	0EE6				     escreve_coordenadas_continua:
   3247						     posiciona 11,56
1  3248	0EE6  52				     push dx
1  3249	0EE7  51				     push cx
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 58
minado.ASM



1  3250	0EE8  53				     push bx
1  3251	0EE9  50				     push ax
1  3252	0EEA  B6 0B			     mov dh,11	     ; linha
1  3253	0EEC  B2 38			     mov dl,56	     ; coluna
1  3254	0EEE  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   3255				     zero - valor em bh
1  3256	0EF0  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  3257	0EF2  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  3258	0EF4  58				     pop ax
1  3259	0EF5  5B				     pop bx
1  3260	0EF6  59				     pop cx
1  3261	0EF7  5A				     pop dx
   3262	0EF8  8A 16 09F7r			     mov dl,coluna_matriz
   3263	0EFC  88 16 09EBr			     mov coluna_ascii,dl
   3264	0F00  80 3E 09F7r 0A			     cmp coluna_matriz,10
   3265	0F05  73 1E				     jae coluna_igual_10 ; jump	if above or equal
   3266	0F07  80 0E 09EBr 30			     or	 coluna_ascii,00110000B	; converte o valor decimal de 1	a 9 contido em	    +
   3267				     coluna_ascii para o seu correspondente caracter ascii
   3268						     escreve ZERO
1  3269	0F0C  52				     push dx
1  3270	0F0D  50				     push ax
1  3271	0F0E  BA 09EEr				     lea dx,ZERO
1  3272	0F11  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  3273	0F13  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  3274	0F15  58				     pop ax
1  3275	0F16  5A				     pop dx
   3276						     escreve coluna_ascii
1  3277	0F17  52				     push dx
1  3278	0F18  50				     push ax
1  3279	0F19  BA 09EBr				     lea dx,coluna_ascii
1  3280	0F1C  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  3281	0F1E  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  3282	0F20  58				     pop ax
1  3283	0F21  5A				     pop dx
   3284	0F22  EB 17 90				     jmp escreve_coordenadas_fim
   3285	0F25				     coluna_igual_10:
   3286						     escreve UM
1  3287	0F25  52				     push dx
1  3288	0F26  50				     push ax
1  3289	0F27  BA 09F0r				     lea dx,UM
1  3290	0F2A  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  3291	0F2C  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  3292	0F2E  58				     pop ax
1  3293	0F2F  5A				     pop dx
   3294						     escreve ZERO
1  3295	0F30  52				     push dx
1  3296	0F31  50				     push ax
1  3297	0F32  BA 09EEr				     lea dx,ZERO
1  3298	0F35  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  3299	0F37  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  3300	0F39  58				     pop ax
1  3301	0F3A  5A				     pop dx
   3302	0F3B				     escreve_coordenadas_fim:
   3303						     posiciona linha_tela,coluna_tela
1  3304	0F3B  52				     push dx
1  3305	0F3C  51				     push cx
1  3306	0F3D  53				     push bx
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 59
minado.ASM



1  3307	0F3E  50				     push ax
1  3308	0F3F  8A 36 09F4r		     mov dh,linha_tela	     ; linha
1  3309	0F43  8A 16 09F5r		     mov dl,coluna_tela	     ; coluna
1  3310	0F47  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   3311				     zero - valor em bh
1  3312	0F49  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  3313	0F4B  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  3314	0F4D  58				     pop ax
1  3315	0F4E  5B				     pop bx
1  3316	0F4F  59				     pop cx
1  3317	0F50  5A				     pop dx
   3318	0F51  5A				     pop dx
   3319	0F52  58				     pop ax
   3320	0F53  C3				     ret
   3321	0F54			     escreve_coordenadas endp
   3322
   3323				     ;-----------------------------------------------------------------------------------------------
   3324				     --------------------------
   3325				     ;-----------------------------------------------------------------------------------------------
   3326				     --------------------------
   3327
   3328	0F54			     imprimir_conteudo_matriz proc
   3329	0F54  50				     push ax
   3330	0F55  52				     push dx
   3331	0F56  C6 06 09F4r 04			     mov linha_tela,4
   3332	0F5B  C6 06 09F5r 05			     mov coluna_tela,5
   3333	0F60  BF 0000r				     lea di,conteudo_matriz
   3334	0F63				     imprimir_conteudo_matriz_continua:
   3335	0F63  8A 05				     mov al,[di]
   3336	0F65  A2 09F2r				     mov conteudo,al
   3337	0F68  80 3E 09F2r FF			     cmp conteudo,-1
   3338	0F6D  75 08				     jne imprime_continua ; não	tiver mina continua normalmente
   3339	0F6F  80 26 09F2r DB			     and conteudo,11011011B ; faz and para imprimir o caractere	@
   3340	0F74  EB 06 90				     jmp imprime_continua2
   3341	0F77				     imprime_continua:
   3342	0F77  80 0E 09F2r 30			     or	conteudo,00110000B   ; converte	o valor	decimal	de 1 a 9 contido em	    +
   3343				     coluna_ascii para o seu correspondente caracter ascii
   3344	0F7C				     imprime_continua2:
   3345						     posiciona linha_tela,coluna_tela
1  3346	0F7C  52				     push dx
1  3347	0F7D  51				     push cx
1  3348	0F7E  53				     push bx
1  3349	0F7F  50				     push ax
1  3350	0F80  8A 36 09F4r		     mov dh,linha_tela	     ; linha
1  3351	0F84  8A 16 09F5r		     mov dl,coluna_tela	     ; coluna
1  3352	0F88  B7 00			     mov bh,0	     ; posiciona o cursor na posição determinada por dh	e dl, e	na página   +
   3353				     zero - valor em bh
1  3354	0F8A  B4 02				     mov ah,2	     ; configura serviço de vídeo para "Definir	posição	do cursor"
1  3355	0F8C  CD 10				     int 10H	     ; chama serviço de	vídeo, ou seja,	executa	as configurações
1  3356	0F8E  58				     pop ax
1  3357	0F8F  5B				     pop bx
1  3358	0F90  59				     pop cx
1  3359	0F91  5A				     pop dx
   3360						     escreve conteudo
1  3361	0F92  52				     push dx
1  3362	0F93  50				     push ax
1  3363	0F94  BA 09F2r				     lea dx,conteudo
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 60
minado.ASM



1  3364	0F97  B4 09				     mov ah,9 ;	configura serviço de saída para	"Saída de String"
1  3365	0F99  CD 21				     int 21H ; chama serviço de	saída, ou seja,	executa	as configurações
1  3366	0F9B  58				     pop ax
1  3367	0F9C  5A				     pop dx
   3368	0F9D  47				     inc di
   3369	0F9E  80 3E 09F5r 29			     cmp coluna_tela,41
   3370	0FA3  74 07				     je	nova_linha
   3371	0FA5  80 06 09F5r 04			     add coluna_tela,4
   3372	0FAA  EB B7				     jmp imprimir_conteudo_matriz_continua
   3373	0FAC				     nova_linha:
   3374	0FAC  80 3E 09F4r 16			     cmp linha_tela,22
   3375	0FB1  74 0C				     je	imprimir_conteudo_matriz_fim
   3376	0FB3  80 06 09F4r 02			     add linha_tela,2
   3377	0FB8  C6 06 09F5r 05			     mov coluna_tela,5
   3378	0FBD  EB A4				     jmp imprimir_conteudo_matriz_continua
   3379	0FBF				     imprimir_conteudo_matriz_fim:
   3380	0FBF  5A				     pop dx
   3381	0FC0  58				     pop ax
   3382	0FC1  C3				     ret
   3383	0FC2			     imprimir_conteudo_matriz endp
   3384
   3385				     ;-----------------------------------------------------------------------------------------------
   3386				     --------------------------
   3387				     ;-----------------------------------------------------------------------------------------------
   3388				     --------------------------
   3389
   3390
   3391	0FC2			     program  ends
   3392					     end inicio
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 61
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "06/23/10"
??FILENAME			  Text	 "minado  "
??TIME				  Text	 "21:31:04"
??VERSION			  Number 0314
@CPU				  Text	 0101H
@CURSEG				  Text	 PROGRAM
@FILENAME			  Text	 MINADO
@WORDSIZE			  Text	 2
ASCIICODE			  Byte	 DADOS:09F9
BACKSPACE			  Number 0008
CALCULA_POSICOES		  Near	 PROGRAM:0A1C
CALCULA_POSICOES_CASO1		  Near	 PROGRAM:0ADC
CALCULA_POSICOES_CASO2		  Near	 PROGRAM:0AFA
CALCULA_POSICOES_CASO3		  Near	 PROGRAM:0B18
CALCULA_POSICOES_CASO4		  Near	 PROGRAM:0B48
CALCULA_POSICOES_CASO5		  Near	 PROGRAM:0B66
CALCULA_POSICOES_CASO6		  Near	 PROGRAM:0B84
CALCULA_POSICOES_CASO7		  Near	 PROGRAM:0BB4
CALCULA_POSICOES_CASO8		  Near	 PROGRAM:0BE6
CALCULA_POSICOES_CASO9		  Near	 PROGRAM:0C18
CALCULA_POSICOES_CONTINUA	  Near	 PROGRAM:0A4C
CALCULA_POSICOES_FIM		  Near	 PROGRAM:0AD7
CALCULA_POSICOES_GRUPO1		  Near	 PROGRAM:0A9A
CALCULA_POSICOES_GRUPO2		  Near	 PROGRAM:0AB7
CASO1_1				  Near	 PROGRAM:0AE4
CASO1_2				  Near	 PROGRAM:0AEE
CASO1_3				  Near	 PROGRAM:0AF6
CASO2_1				  Near	 PROGRAM:0B02
CASO2_2				  Near	 PROGRAM:0B0C
CASO2_3				  Near	 PROGRAM:0B14
CASO3_1				  Near	 PROGRAM:0B20
CASO3_2				  Near	 PROGRAM:0B2A
CASO3_3				  Near	 PROGRAM:0B34
CASO3_4				  Near	 PROGRAM:0B3C
CASO3_5				  Near	 PROGRAM:0B44
CASO4_1				  Near	 PROGRAM:0B50
CASO4_2				  Near	 PROGRAM:0B5A
CASO4_3				  Near	 PROGRAM:0B62
CASO5_1				  Near	 PROGRAM:0B6E
CASO5_2				  Near	 PROGRAM:0B78
CASO5_3				  Near	 PROGRAM:0B80
CASO6_1				  Near	 PROGRAM:0B8C
CASO6_2				  Near	 PROGRAM:0B96
CASO6_3				  Near	 PROGRAM:0BA0
CASO6_4				  Near	 PROGRAM:0BA8
CASO6_5				  Near	 PROGRAM:0BB0
CASO7_1				  Near	 PROGRAM:0BBE
CASO7_2				  Near	 PROGRAM:0BC6
CASO7_3				  Near	 PROGRAM:0BD0
CASO7_4				  Near	 PROGRAM:0BDA
CASO7_5				  Near	 PROGRAM:0BE2
CASO8_1				  Near	 PROGRAM:0BF0
CASO8_2				  Near	 PROGRAM:0BF8
CASO8_3				  Near	 PROGRAM:0C02
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 62
Symbol Table



CASO8_4				  Near	 PROGRAM:0C0C
CASO8_5				  Near	 PROGRAM:0C14
CASO9_1				  Near	 PROGRAM:0C22
CASO9_2				  Near	 PROGRAM:0C2A
CASO9_3				  Near	 PROGRAM:0C32
CASO9_4				  Near	 PROGRAM:0C3C
CASO9_5				  Near	 PROGRAM:0C46
CASO9_6				  Near	 PROGRAM:0C50
CASO9_7				  Near	 PROGRAM:0C58
CASO9_8				  Near	 PROGRAM:0C60
COLOCA_A			  Near	 PROGRAM:0CA4
COLUNA_ASCII			  Byte	 DADOS:09EB
COLUNA_IGUAL_10			  Near	 PROGRAM:0F25
COLUNA_MATRIZ			  Byte	 DADOS:09F7
COLUNA_TELA			  Byte	 DADOS:09F5
CONTADOR			  Byte	 DADOS:09FD
CONTEUDO			  Byte	 DADOS:09F2
CONTEUDO_FIM			  Byte	 DADOS:09F3
CONTEUDO_MATRIZ			  Byte	 DADOS:0000
CONTINUA_DENOVO			  Near	 PROGRAM:0136
CONTINUA_TRATA_ENTER1		  Near	 PROGRAM:06B6
CONTINUA_TRATA_ENTER2		  Near	 PROGRAM:06C3
CONTINUA_TRATA_ENTER3		  Near	 PROGRAM:06D6
CONT_POSICOES			  Byte	 DADOS:09FE
CR				  Number 000D
DECREMENTA_CONT_POSICOES	  Near	 PROGRAM:0646
DENOVO				  Near	 PROGRAM:012A
DESLOCAMENTO			  Byte	 DADOS:09F8
DIRECIONAL			  Number 0000
DOWN				  Number 0050
ENCONTROU_MINA			  Near	 PROGRAM:0A67
ESCOLHA_MARCADORES		  Byte	 DADOS:0064
ESCREVE_COORDENADAS		  Near	 PROGRAM:0E8F
ESCREVE_COORDENADAS_CONTINUA	  Near	 PROGRAM:0EE6
ESCREVE_COORDENADAS_FIM		  Near	 PROGRAM:0F3B
ESCREVE_MARCADOS		  Near	 PROGRAM:0923
ESCREVE_MARCADOS_CONTINUA	  Near	 PROGRAM:0994
ESPERA_DENOVO			  Near	 PROGRAM:051E
ESPERA_TECLA			  Near	 PROGRAM:061F
EXIT				  Number 001B
EXPLODIU			  Byte	 DADOS:0A03
FIM_COLUNA_ASCII		  Byte	 DADOS:09ED
FIM_ENTER			  Near	 PROGRAM:0564
FIM_LINHA_ASCII			  Byte	 DADOS:09EA
FIM_PROGRAMA			  Near	 PROGRAM:036B
FIM_PROGRAMA2			  Near	 PROGRAM:0586
IMPRIME_CONTINUA		  Near	 PROGRAM:0F77
IMPRIME_CONTINUA2		  Near	 PROGRAM:0F7C
IMPRIMIR_CONTEUDO_MATRIZ	  Near	 PROGRAM:0F54
IMPRIMIR_CONTEUDO_MATRIZ_CONTINU  Near	 PROGRAM:0F63
A
IMPRIMIR_CONTEUDO_MATRIZ_FIM	  Near	 PROGRAM:0FBF
INICIALIZA_MINAS		  Near	 PROGRAM:00C6
INICIALIZA_TELA			  Near	 PROGRAM:0082
INICIALIZA_VARIAVEIS		  Near	 PROGRAM:0007
INICIO				  Near	 PROGRAM:0000
JA_TEM_M			  Near	 PROGRAM:081C
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 63
Symbol Table



LACO_CALCULA_POSICOES		  Near	 PROGRAM:0A2D
LEFT				  Number 004B
LF				  Number 000A
LIMPA_ARRAYS_DENOVO		  Near	 PROGRAM:0016
LINHADEC_LEFT			  Near	 PROGRAM:0E18
LINHADEC_UP			  Near	 PROGRAM:0D36
LINHAINC_DOWN			  Near	 PROGRAM:0DA7
LINHAINC_LEFT			  Near	 PROGRAM:0E89
LINHA_ASCII			  Byte	 DADOS:09E8
LINHA_IGUAL_10			  Near	 PROGRAM:0ED0
LINHA_MATRIZ			  Byte	 DADOS:09F6
LINHA_TELA			  Byte	 DADOS:09F4
MINA2_MAIOR_IGUAL_10		  Near	 PROGRAM:09D1
MINAS_A_MARCAR			  Byte	 DADOS:0A00
MINAS_MARCADAS			  Byte	 DADOS:09FF
MINAS_TOTAIS			  Byte	 DADOS:0A01
MINA_MAIOR_OU_IGUAL_10		  Near	 PROGRAM:0969
MINA_MARCADO_FIM		  Near	 PROGRAM:09FC
MSG_APERTA_ENTER		  Byte	 DADOS:0984
MSG_CONFIRMACAO			  Byte	 DADOS:09D2
MSG_CONTINUAR			  Byte	 DADOS:09B9
MSG_EXPLODIU			  Byte	 DADOS:0951
MSG_FIM				  Byte	 DADOS:091E
MSG_FIM_THANKS			  Byte	 DADOS:093D
MSG_GANHOU			  Byte	 DADOS:096C
MSG_LIMPA_CHAR			  Byte	 DADOS:089E
MSG_LIMPA_LINHA			  Byte	 DADOS:08A0
MSG_MUITA_MARCACAO		  Byte	 DADOS:08FF
MSG_POSICAO_DESMARCADA		  Byte	 DADOS:08DF
MSG_POSICAO_MARCADA		  Byte	 DADOS:08C2
MSG_T_PARA_TERMINAR		  Byte	 DADOS:09A1
NAOZERO				  Near	 PROGRAM:0618
NAO_PODE_MARCAR			  Near	 PROGRAM:08AA
NAO_TEM_MINA			  Near	 PROGRAM:0726
NOVA_LINHA			  Near	 PROGRAM:0FAC
NUMERO_MINAS			  Byte	 DADOS:09FC
OPCAO_ABRIR			  Byte	 DADOS:09E6
OPCAO_MARCAR			  Byte	 DADOS:09E4
PEGA_TECLA_DENOVO		  Near	 PROGRAM:043B
PODE_TERMINAR			  Byte	 DADOS:0A02
POSICOES_ATUALIZADAS		  Near	 PROGRAM:0A38
POS_CAMPO1			  Byte	 DADOS:0898
POS_CAMPO2			  Byte	 DADOS:089A
POS_CAMPO_VAZIO			  Byte	 DADOS:089C
QUERO_CASO1			  Near	 PROGRAM:0AAD
QUERO_CASO2			  Near	 PROGRAM:0AB2
QUERO_CASO4			  Near	 PROGRAM:0ACB
QUERO_CASO5			  Near	 PROGRAM:0AD1
QUERO_CASO7			  Near	 PROGRAM:0A88
QUERO_CASO8			  Near	 PROGRAM:0A8D
QUERO_ENCONTROU_MINA		  Near	 PROGRAM:0A35
QUERO_GRUPO1			  Near	 PROGRAM:0A92
QUERO_GRUPO2			  Near	 PROGRAM:0A95
QUERO_IR_NAO_PODE_MARCAR	  Near	 PROGRAM:0757
QUERO_IR_PRA_M			  Near	 PROGRAM:0754
QUERO_IR_PRO_FIM		  Near	 PROGRAM:0751
QUERO_IR_PRO_FIM_2		  Near	 PROGRAM:06BE
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 64
Symbol Table



QUERO_LACO_CALCULA_POSICOES	  Near	 PROGRAM:0A65
QUERO_TESTA_M			  Near	 PROGRAM:06B1
RAND				  Near	 PROGRAM:05FF
RIGHT				  Number 004D
SCANCODE			  Byte	 DADOS:09FA
SELECAO_AM			  Byte	 DADOS:09FB
SEND				  Number 000D
T				  Number 0074
TAB				  Number 0009
TELA				  Near	 DADOS:00C8
TEM_MINA			  Near	 PROGRAM:06E4
TESTA_DIRECIONAL		  Near	 PROGRAM:019C
TESTA_DOWN			  Near	 PROGRAM:0216
TESTA_ENTER			  Near	 PROGRAM:0190
TESTA_ESC			  Near	 PROGRAM:035E
TESTA_LEFT			  Near	 PROGRAM:0284
TESTA_M				  Near	 PROGRAM:075A
TESTA_RIGHT			  Near	 PROGRAM:02F1
TESTA_T				  Near	 PROGRAM:016E
TESTA_TAB			  Near	 PROGRAM:0184
TESTA_UP			  Near	 PROGRAM:01A8
TRATA_DOWN			  Near	 PROGRAM:0D3C
TRATA_ENTER			  Near	 PROGRAM:0654
TRATA_ENTER_FIM			  Near	 PROGRAM:091E
TRATA_ENTER_TERMINAR		  Near	 PROGRAM:0819
TRATA_LEFT			  Near	 PROGRAM:0DAD
TRATA_RIGHT			  Near	 PROGRAM:0E1E
TRATA_T				  Near	 PROGRAM:0624
TRATA_TAB			  Near	 PROGRAM:0C64
TRATA_T_CONTINUA		  Near	 PROGRAM:0634
TRATA_T_FIM			  Near	 PROGRAM:0653
TRATA_UP			  Near	 PROGRAM:0CCB
TUDO_DENOVO			  Near	 PROGRAM:0583
UM				  Byte	 DADOS:09F0
UP				  Number 0048
USUARIO_GANHOU			  Near	 PROGRAM:03E9
VAI_ESPERA_TECLA		  Near	 PROGRAM:0423
VOCE_GANHOU			  Byte	 DADOS:0A04
VOLTA1				  Near	 PROGRAM:0281
VOLTA2				  Near	 PROGRAM:02EF
VOLTA3				  Near	 PROGRAM:035C
ZERO				  Byte	 DADOS:09EE
_@RNDADR			  Word	 DADOS:0A85
_@RNDCNT			  Word	 DADOS:0A81
_@RNDMAX			  Number 007C
_@RNDPTR			  Word	 DADOS:0A83
_@RNDVET			  Byte	 DADOS:0A05

Macro Name

ESCREVE
ESPERA_TECLA_TESTE
EXCLUI_MARCADOR
LIMPA_ARRAYS
LIMPA_TELA
PEGA_COORDENADAS
PEGA_COORDENADAS_TELA
Turbo Assembler	 Version 3.2	    06/23/10 21:31:06	    Page 65
Symbol Table



POSICIONA

Groups & Segments		  Bit Size Align  Combine Class

DADOS				  16  0A87 Para	  none
PILHA				  16  0808 Para	  Stack
PROGRAM				  16  0FC2 Para	  none
